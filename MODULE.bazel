module(
    name = "megaboom",
    version = "0.0.1",
    compatibility_level = 1,
)

bazel_dep(
    name = "rules_python",
    version = "1.2.0",
    # reduce namespace collisions by prefixing with bazel_orfs
    repo_name = "megaboom_rules_python",
)

# FIXME why do we need to lock down 3.13 to match bazel-orfs? Without this, 3.11 might get picked
PYTHON_VERSION = "3.13"

python = use_extension("@megaboom_rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    ignore_root_user_error = True,
    python_version = PYTHON_VERSION,
)

# To test with local bazel-orfs, read: https://github.com/The-OpenROAD-Project/bazel-orfs?tab=readme-ov-file#usage
#
# 1. comment git_override() below
# 2. uncomment local_path_override below
#
# local_path_override(
#   module_name = "bazel-orfs", path = "../bazel-orfs"
# )
bazel_dep(name = "bazel-orfs")
git_override(
    module_name = "bazel-orfs",
    commit = "141b84c2b44575fc2e222843ba34ab4f21839293",
    remote = "https://github.com/The-OpenROAD-Project/bazel-orfs.git",
)

# TL;DR to test with a locally built ORFS docker image, update below after building
# locally and run `bazel mod tidy`:
#
# $ ./build_openroad.sh
# [lots of output deleted]
# 23 naming to docker.io/openroad/flow-ubuntu22.04-builder:7582cf done
# $ docker buildx imagetools inspect openroad/flow-ubuntu22.04-builder --format "{{json .Manifest.Digest}}"
# "sha256:5d4d20d3d5638fa5c79b05c6f9b240c7e5691bf8b6c47c9a46d9bb0e0d53bb09"
# $Â bazel mod tidy

# ORFS is provided as a transitive dependency from bazel-orfs, but
# it is possible to specify a version in here if something newer than
# latest bazel-orfs tested ORFS is needed.

orfs = use_extension("@bazel-orfs//:extension.bzl", "orfs_repositories")
orfs.default(
    image = "docker.io/openroad/orfs:v3.0-3624-gad13f2df",
    sha256 = "f1eb20a56c5f5e05e93c07dd07d838e0e8a4812c17ff9bf6e5a4897069ec1ed6",
)
use_repo(orfs, "com_github_nixos_patchelf_download")
use_repo(orfs, "docker_orfs")
