load("@bazel-orfs//:openroad.bzl", "orfs_flow")

filegroup(
    name = "io-sram",
    srcs = [
        "io-sram.tcl",
    ],
    data = [
        "util.tcl",
    ],
    visibility = [":__subpackages__"],
)

filegroup(
    name = "io-sram-bottom",
    srcs = [
        "io-sram-bottom.tcl",
    ],
    data = [
        "util.tcl",
    ],
    visibility = [":__subpackages__"],
)

filegroup(
    name = "io-boomtile",
    srcs = [
        "io-boomtile.tcl",
    ],
    data = [
        "util.tcl",
    ],
)

filegroup(
    name = "io",
    srcs = [
        "io.tcl",
    ],
    data = [
        "util.tcl",
    ],
)

filegroup(
    name = "io-top",
    srcs = [
        "io-top.tcl",
    ],
    data = [
        "util.tcl",
    ],
)

filegroup(
    name = "constraints-sram",
    srcs = [
        "constraints.sdc",
    ],
    visibility = [":__subpackages__"],
)

filegroup(
    name = "constraints-boomtile",
    srcs = [
        "constraints-boomtile.sdc",
    ],
    visibility = [":__subpackages__"],
)

filegroup(
    name = "boomtile-macro-placement",
    srcs = [
        "macros.tcl",
    ],
    visibility = [":__subpackages__"],
)

BLOCK_FLOORPLAN = {
    "PDN_TCL": "$(PLATFORM_DIR)/openRoad/pdn/BLOCK_grid_strategy.tcl",
    # repair_timing runs for hours in floorplan
    "REMOVE_ABC_BUFFERS": "1",
}
BLOCKS_FLOORPLAN = {
    "PDN_TCL": "$(PLATFORM_DIR)/openRoad/pdn/BLOCKS_grid_strategy.tcl",
    # repair_timing runs for hours in floorplan
    "REMOVE_ABC_BUFFERS": "1",
}

SRAM_SYNTH_ARGUMENTS = {"SDC_FILE": "$(location :constraints-sram)"}

FLOOR_PLACE_ARGUMENTS = {"IO_CONSTRAINTS": "$(location :io)"}

SRAM_FLOOR_PLACE_ARGUMENTS = {"IO_CONSTRAINTS": "$(location :io-sram)"}

BOOMTILE_FLOOR_PLACE_ARGUMENTS = {
    "IO_CONSTRAINTS": "$(location :io-boomtile)",
    "PLACE_DENSITY": "0.15",
}

SKIP_REPORT_METRICS = {"SKIP_REPORT_METRICS": "1"}

mock_files = [
    "mock/array_256x128.sv",
    "mock/data_2048x8.sv",
    "mock/dataArrayB_256x64.sv",
    "mock/ebtb_128x40.sv",
    "mock/l2_tlb_ram_0_512x46.sv",
    "mock/regfile_128x64.sv",
    "mock/regfile_128x65.sv",
    "mock/tag_array_64x184.sv",
]

all_source_files = sorted(glob(
    include = [
        "rtl/*.sv",
        "rtl/*.v",
    ],
    exclude = ([f.replace("mock/", "rtl/") for f in mock_files] + [
        "rtl/ClockSourceAtFreqMHz.v",
        "rtl/SimJTAG.v",
        "rtl/SimTSI.v",
    ]),
) + mock_files)

boom_tile_small_srams = [
    "tag_array_64x184",
    "tag_array_64x168",
    # "data_2048x2",
    "table_256x48",
    "table_128x52",
    "table_128x44",
    "btb_128x56",
    "meta_128x120",
    "lb_32x128",
    "sdq_17x64",
    "data_2048x8",
    "mem_256x4",
]

boom_tile_rams = [
    # "l2_tlb_ram_0_512x46",
    "ebtb_128x40",
    "array_256x128",
    "dataArrayB_256x64",
    # "l2_tlb_ram_0_512x45",
]

digital_top_srams = [
    # "cc_dir_1024x168",
    # "data_data_40x128",
    # "ghist_40x64",
    "meta_40x240",
]

[
    orfs_flow(
        name = ram,
        abstract_stage = "cts",
        stage_args = {
            "synth": SRAM_SYNTH_ARGUMENTS | {"SYNTH_MEMORY_MAX_BITS": "16384"},
            "floorplan": BLOCK_FLOORPLAN | SRAM_FLOOR_PLACE_ARGUMENTS | {
                "CORE_UTILIZATION": "40",
                "CORE_ASPECT_RATIO": "2",
            },
            "place": SRAM_FLOOR_PLACE_ARGUMENTS | {
                "PLACE_DENSITY": "0.65",
                "GPL_TIMING_DRIVEN": "0",
            },
            "cts": SKIP_REPORT_METRICS | {"SKIP_CTS_REPAIR_TIMING": "0"},
        },
        stage_sources = {
            "synth": [":constraints-sram"],
            "floorplan": [":io-sram"],
            "place": [":io-sram"],
        },
        verilog_files = [
            {
                "array_256x128": "mock/",
                "cc_dir_1024x168": "mock/",
                "data_2048x2": "mock/",
                "dataArrayB_256x64": "mock/",
                "data_data_40x128": "mock/",
                "ebtb_128x40": "mock/",
                "ghist_40x64": "mock/",
                "l2_tlb_ram_0_512x45": "mock/",
                "tag_array_64x184": "mock/",
                "data_2048x8": "mock/",
            }.get(ram, "rtl/") + ram + ".sv",
        ],
    )
    for ram in boom_tile_rams + boom_tile_small_srams + digital_top_srams
]

boom_regfile_rams = {
    "regfile_128x64": ":io-sram-bottom",
    "regfile_128x65": ":io-sram",
}

[
    orfs_flow(
        name = ram,
        abstract_stage = "cts",
        stage_args = {
            "synth": SRAM_SYNTH_ARGUMENTS,
            "floorplan": BLOCK_FLOORPLAN | {
                # "CORE_UTILIZATION": "200",
                # "CORE_ASPECT_RATIO": "4",
                "DIE_AREA": "0 0 400 400",
                "CORE_AREA": "2 2 298 298",
                "IO_CONSTRAINTS": "$(location {})".format(io_constraint),
            },
            "place": {
                "PLACE_DENSITY": {
                    "regfile_128x64": "0.42",
                    "regfile_128x65": "0.3",
                }.get(ram),
                "IO_CONSTRAINTS": "$(location {})".format(io_constraint),
            },
        },
        stage_sources = {
            "synth": [":constraints-sram"],
            "floorplan": [io_constraint],
            "place": [io_constraint],
        },
        verilog_files = ["mock/" + ram + ".sv"],
    )
    for ram, io_constraint in boom_regfile_rams.items()
]

orfs_flow(
    name = "L1MetadataArray",
    abstract_stage = "place",
    macros = ["tag_array_64x184_generate_abstract"],
    stage_args = {
        "synth": SRAM_SYNTH_ARGUMENTS | {"SYNTH_HIERARCHICAL": "1"},
        "floorplan": BLOCKS_FLOORPLAN | FLOOR_PLACE_ARGUMENTS | {
            "CORE_UTILIZATION": "3",
            "RTLMP_FLOW": "1",
            "CORE_MARGIN": "2",
        },
        "place": FLOOR_PLACE_ARGUMENTS | {
            "PLACE_DENSITY": "0.20",
            "PLACE_PINS_ARGS": "-annealing",
        },
    },
    stage_sources = {
        "synth": [":constraints-sram"],
        "floorplan": [":io"],
        "place": [":io"],
    },
    verilog_files = ["rtl/L1MetadataArray.sv"],
)

boom_tile_macros = [x + "_generate_abstract" for x in boom_tile_rams + boom_regfile_rams.keys() + boom_tile_small_srams + digital_top_srams]

orfs_flow(
    name = "BoomTile",
    macros = boom_tile_macros,
    args = SKIP_REPORT_METRICS | {
            "SYNTH_HIERARCHICAL": "1",
            "SDC_FILE": "$(location :constraints-boomtile)",
        } | BLOCKS_FLOORPLAN | BOOMTILE_FLOOR_PLACE_ARGUMENTS | SKIP_REPORT_METRICS | {
            "CORE_UTILIZATION": "20",
            # Tweak below to work around initial condition sensitive bugs in
            # macro placement
            "MACRO_PLACE_HALO": "19 19",
            "RTLMP_FLOW": "1",
            "MACRO_PLACEMENT_TCL": "$(location :boomtile-macro-placement)",
        } | SKIP_REPORT_METRICS | {
            "TNS_END_PERCENT": "0",
            "SKIP_CTS_REPAIR_TIMING": "1",
        } | BOOMTILE_FLOOR_PLACE_ARGUMENTS | SKIP_REPORT_METRICS | {
            "PLACE_PINS_ARGS": "-annealing",
            "GPL_ROUTABILITY_DRIVEN": "1",
            "GPL_TIMING_DRIVEN": "0",
        } | SKIP_REPORT_METRICS | {
            # Save global route time for now
            "SKIP_INCREMENTAL_REPAIR": "1",
            "MIN_ROUTING_LAYER": "M2",
            "MAX_ROUTING_LAYER": "M7",
            "ROUTING_LAYER_ADJUSTMENT": "0.45"
    },
    stage_sources = {
        "synth": [":constraints-boomtile"],
        "floorplan": [":io-boomtile", ":boomtile-macro-placement"],
        "place": [":io-boomtile"],
    },
    verilog_files = all_source_files,
)
