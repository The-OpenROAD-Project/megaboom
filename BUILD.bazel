load("//:openroad.bzl", "build_openroad")

all_source_files = [
"rtl/ALUExeUnit_2.sv",
"rtl/ALUExeUnit_3.sv",
"rtl/ALUExeUnit_4.sv",
"rtl/ALUExeUnit_5.sv",
"rtl/ALUExeUnit.sv",
"rtl/ALU.sv",
"rtl/ALUUnit_1.sv",
"rtl/ALUUnit_2.sv",
"rtl/ALUUnit.sv",
"rtl/AMOALU.sv",
"rtl/Arbiter_10.sv",
"rtl/Arbiter_11.sv",
"rtl/Arbiter_12.sv",
"rtl/Arbiter_13.sv",
"rtl/Arbiter_14.sv",
"rtl/Arbiter_15.sv",
"rtl/Arbiter_16.sv",
"rtl/Arbiter_18.sv",
"rtl/Arbiter_19.sv",
"rtl/Arbiter_1.sv",
"rtl/Arbiter_20.sv",
"rtl/Arbiter_2.sv",
"rtl/Arbiter_3.sv",
"rtl/Arbiter_4.sv",
"rtl/Arbiter_5.sv",
"rtl/Arbiter_6.sv",
"rtl/Arbiter_7.sv",
"rtl/Arbiter_8.sv",
"rtl/Arbiter_9.sv",
"rtl/Arbiter.sv",
"mock/array_256x128.sv",
"rtl/AsyncQueueSink_1.sv",
"rtl/AsyncQueueSink_2.sv",
"rtl/AsyncQueueSink_3.sv",
"rtl/AsyncQueueSink.sv",
"rtl/AsyncQueueSource_1.sv",
"rtl/AsyncQueueSource_2.sv",
"rtl/AsyncQueueSource_3.sv",
"rtl/AsyncQueueSource.sv",
"rtl/AsyncQueue.sv",
"rtl/AsyncResetRegVec_w1_i0.sv",
"rtl/AsyncResetRegVec_w1_i1.sv",
"rtl/AsyncResetRegVec_w2_i0.sv",
"rtl/AsyncResetSynchronizerPrimitiveShiftReg_d3_i0.sv",
"rtl/AsyncResetSynchronizerShiftReg_w1_d3_i0_1.sv",
"rtl/AsyncResetSynchronizerShiftReg_w1_d3_i0.sv",
"rtl/AsyncResetSynchronizerShiftReg_w4_d3_i0.sv",
"rtl/AsyncValidSync.sv",
"rtl/Atomics.sv",
"rtl/BankBinder.sv",
"rtl/BankedStore.sv",
"rtl/BasicDispatcher.sv",
"rtl/BIMBranchPredictorBank.sv",
"rtl/BoomCore.sv",
"rtl/BoomDuplicatedDataArray.sv",
"rtl/BoomFrontend.sv",
"rtl/BoomIOMSHR.sv",
"rtl/BoomMSHRFile.sv",
"rtl/BoomMSHR.sv",
"rtl/BoomNonBlockingDCache.sv",
"rtl/BoomProbeUnit.sv",
"rtl/BoomRAS.sv",
"rtl/BoomTile.sv",
"rtl/BoomWritebackUnit.sv",
"rtl/BranchDecode.sv",
"rtl/BranchKillableQueue_10.sv",
"rtl/BranchKillableQueue_11.sv",
"rtl/BranchKillableQueue_8.sv",
"rtl/BranchKillableQueue_9.sv",
"rtl/BranchKillableQueue.sv",
"rtl/BranchMaskGenerationLogic.sv",
"rtl/BranchPredictor.sv",
"rtl/btb_128x56.sv",
"rtl/BTBBranchPredictorBank.sv",
"rtl/BundleBridgeNexus_16.sv",
"rtl/CaptureChain.sv",
"rtl/CaptureUpdateChain_1.sv",
"rtl/CaptureUpdateChain_2.sv",
"rtl/CaptureUpdateChain.sv",
"rtl/cc_banks_16384x64.sv",
"rtl/cc_dir_1024x168.sv",
"rtl/ChipTop.sv",
"rtl/CLINT.sv",
"rtl/ClockCrossingReg_w15.sv",
"rtl/ClockCrossingReg_w43.sv",
"rtl/ClockCrossingReg_w4.sv",
"rtl/ClockCrossingReg_w55.sv",
"rtl/ClockGroupAggregator_7.sv",
"rtl/ClockGroupCombiner.sv",
"rtl/ClockGroupParameterModifier_1.sv",
"rtl/ClockGroupParameterModifier.sv",
"rtl/ClockGroupResetSynchronizer.sv",
"rtl/ClockSinkDomain_1.sv",
"rtl/ClockSinkDomain_2.sv",
"rtl/ClockSinkDomain_3.sv",
"rtl/ClockSinkDomain_4.sv",
"rtl/ClockSinkDomain.sv",
"rtl/CoherenceManagerWrapper.sv",
"rtl/CompareRecFN.sv",
"rtl/ComposedBranchPredictorBank.sv",
"rtl/CSRFile.sv",
"rtl/data_16x65.sv",
"rtl/data_2048x8.sv",
"rtl/data_33x48.sv",
"rtl/data_40x73.sv",
"mock/dataArrayB_256x64.sv",
"rtl/DebugTransportModuleJTAG.sv",
"rtl/DecodeUnit.sv",
"rtl/DigitalTop.sv",
"rtl/Directory.sv",
"rtl/DivSqrtRecF64_mulAddZ31.sv",
"rtl/DivSqrtRecF64.sv",
"rtl/DivSqrtRecF64ToRaw_mulAddZ31.sv",
"rtl/DivUnit.sv",
"rtl/DMIToTL.sv",
"mock/ebtb_128x40.sv",
"rtl/EICG_wrapper.v",
"rtl/ErrorDeviceWrapper.sv",
"rtl/extern_modules.sv",
"rtl/FAMicroBTBBranchPredictorBank.sv",
"rtl/FDivSqrtUnit.sv",
"rtl/FetchBuffer.sv",
"rtl/FetchTargetQueue.sv",
"rtl/FixedClockBroadcast_1.sv",
"rtl/FixedClockBroadcast_3.sv",
"rtl/FixedClockBroadcast.sv",
"rtl/FMADecoder.sv",
"rtl/ForwardingAgeLogic.sv",
"rtl/FpPipeline.sv",
"rtl/FPToFP.sv",
"rtl/FPToInt.sv",
"rtl/FPUExeUnit_1.sv",
"rtl/FPUExeUnit.sv",
"rtl/FPUFMAPipe_1.sv",
"rtl/FPUFMAPipe.sv",
"rtl/FPU.sv",
"rtl/FPUUnit.sv",
"rtl/GenericDeserializer.sv",
"rtl/GenericDigitalInIOCell.v",
"rtl/GenericDigitalOutIOCell.v",
"rtl/GenericSerializer.sv",
"mock/ghist_40x72.sv",
"rtl/head_21x6.sv",
"rtl/head_2x4.sv",
"rtl/head_40x6.sv",
"rtl/HellaCacheArbiter.sv",
"rtl/HellaPeekingArbiter.sv",
"rtl/ICache.sv",
"rtl/IDPool.sv",
"rtl/InclusiveCacheBankScheduler.sv",
"rtl/InclusiveCacheControl.sv",
"rtl/InclusiveCache.sv",
"rtl/INToRecFN_1.sv",
"rtl/INToRecFN.sv",
"rtl/IntSyncAsyncCrossingSink.sv",
"rtl/IntSyncCrossingSource_1.sv",
"rtl/IntSyncCrossingSource_4.sv",
"rtl/IntSyncCrossingSource_5.sv",
"rtl/IntSyncSyncCrossingSink_1.sv",
"rtl/IntSyncSyncCrossingSink.sv",
"rtl/IntToFP.sv",
"rtl/IntToFPUnit.sv",
"rtl/IntXbar_1.sv",
"rtl/IntXbar.sv",
"rtl/IssueSlot_32.sv",
"rtl/IssueSlot.sv",
"rtl/IssueUnitCollapsing_1.sv",
"rtl/IssueUnitCollapsing_2.sv",
"rtl/IssueUnitCollapsing.sv",
"rtl/JtagBypassChain.sv",
"rtl/JtagStateMachine.sv",
"rtl/JtagTapController.sv",
"rtl/L1MetadataArray.sv",
"mock/l2_tlb_ram_0_512x46.sv",
"rtl/lb_32x128.sv",
"rtl/LevelGateway.sv",
"rtl/ListBuffer_1.sv",
"rtl/ListBuffer_2.sv",
"rtl/ListBuffer.sv",
"rtl/LoopBranchPredictorBank.sv",
"rtl/LoopBranchPredictorColumn.sv",
"rtl/LSU.sv",
"rtl/MaxPeriodFibonacciLFSR_3.sv",
"rtl/MaxPeriodFibonacciLFSR.sv",
"rtl/mem_128x4.sv",
"rtl/mem_256x4.sv",
"rtl/mem_268435456x64.sv",
"mock/mem_8192x64.sv",
"rtl/MemAddrCalcUnit.sv",
"rtl/MemoryBus.sv",
"rtl/meta_128x120.sv",
"rtl/meta_40x240.sv",
"rtl/MSHR.sv",
"rtl/Mul54.sv",
"rtl/MulAddRecFNPipe_1.sv",
"rtl/MulAddRecFNPipe.sv",
"rtl/MulAddRecFNToRaw_postMul_1.sv",
"rtl/MulAddRecFNToRaw_postMul.sv",
"rtl/MulAddRecFNToRaw_preMul_1.sv",
"rtl/MulAddRecFNToRaw_preMul.sv",
"rtl/MulDiv.sv",
"rtl/NBDTLB.sv",
"rtl/next_16x4.sv",
"rtl/next_33x6.sv",
"rtl/next_40x6.sv",
"rtl/NLPrefetcher.sv",
"rtl/NonSyncResetSynchronizerPrimitiveShiftReg_d3.sv",
"rtl/OptimizationBarrier_14.sv",
"rtl/OptimizationBarrier_92.sv",
"rtl/OptimizationBarrier_93.sv",
"rtl/OptimizationBarrier.sv",
"rtl/PeripheryBus_1.sv",
"rtl/PeripheryBus.sv",
"rtl/PipelinedMultiplier.sv",
"rtl/PipelinedMulUnit.sv",
"rtl/PLICFanIn.sv",
"rtl/plusarg_reader.v",
"rtl/PMPChecker_1.sv",
"rtl/PMPChecker.sv",
"rtl/ProbePicker.sv",
"rtl/PTW.sv",
"rtl/Queue_10.sv",
"rtl/Queue_11.sv",
"rtl/Queue_13.sv",
"rtl/Queue_14.sv",
"rtl/Queue_15.sv",
"rtl/Queue_17.sv",
"rtl/Queue_18.sv",
"rtl/Queue_19.sv",
"rtl/Queue_1.sv",
"rtl/Queue_20.sv",
"rtl/Queue_21.sv",
"rtl/Queue_22.sv",
"rtl/Queue_23.sv",
"rtl/Queue_24.sv",
"rtl/Queue_25.sv",
"rtl/Queue_26.sv",
"rtl/Queue_27.sv",
"rtl/Queue_28.sv",
"rtl/Queue_29.sv",
"rtl/Queue_32.sv",
"rtl/Queue_33.sv",
"rtl/Queue_34.sv",
"rtl/Queue_35.sv",
"rtl/Queue_36.sv",
"rtl/Queue_37.sv",
"rtl/Queue_38.sv",
"rtl/Queue_39.sv",
"rtl/Queue_41.sv",
"rtl/Queue_42.sv",
"rtl/Queue_44.sv",
"rtl/Queue_46.sv",
"rtl/Queue_47.sv",
"rtl/Queue_48.sv",
"rtl/Queue_49.sv",
"rtl/Queue_4.sv",
"rtl/Queue_50.sv",
"rtl/Queue_52.sv",
"rtl/Queue_5.sv",
"rtl/Queue_8.sv",
"rtl/Queue_9.sv",
"rtl/Queue.sv",
"rtl/ram_12x110.sv",
"rtl/ram_16x46.sv",
"rtl/ram_256x8.sv",
"rtl/ram_2x104.sv",
"rtl/ram_2x110.sv",
"rtl/ram_2x113.sv",
"rtl/ram_2x117.sv",
"rtl/ram_2x118.sv",
"rtl/ram_2x119.sv",
"rtl/ram_2x120.sv",
"rtl/ram_2x121.sv",
"rtl/ram_2x123.sv",
"rtl/ram_2x124.sv",
"rtl/ram_2x412.sv",
"rtl/ram_2x56.sv",
"rtl/ram_2x79.sv",
"rtl/ram_2x80.sv",
"rtl/ram_2x82.sv",
"rtl/ram_2x83.sv",
"rtl/ram_2x84.sv",
"rtl/ram_3x79.sv",
"rtl/ram_4x65.sv",
"rtl/ram_5x79.sv",
"rtl/ram_7x79.sv",
"rtl/ram_8x72.sv",
"rtl/ram_8x8.sv",
"rtl/ram_data_3x64.sv",
"rtl/ram_sink_2x3.sv",
"rtl/RecFNToIN_1.sv",
"rtl/RecFNToIN.sv",
"rtl/RecFNToRecFN_1.sv",
"rtl/RecFNToRecFN.sv",
"mock/regfile_128x64.sv",
"mock/regfile_128x65.sv",
"rtl/RegisterFileSynthesizable_1.sv",
"rtl/RegisterFileSynthesizable.sv",
"rtl/RegisterRead_1.sv",
"rtl/RegisterReadDecode_1.sv",
"rtl/RegisterReadDecode_2.sv",
"rtl/RegisterReadDecode_4.sv",
"rtl/RegisterReadDecode_5.sv",
"rtl/RegisterReadDecode_6.sv",
"rtl/RegisterReadDecode.sv",
"rtl/RegisterRead.sv",
"rtl/RenameBusyTable_1.sv",
"rtl/RenameBusyTable.sv",
"rtl/RenameFreeList_1.sv",
"rtl/RenameFreeList.sv",
"rtl/RenameMapTable_1.sv",
"rtl/RenameMapTable.sv",
"rtl/RenameStage_1.sv",
"rtl/RenameStage.sv",
"rtl/Repeater_10.sv",
"rtl/Repeater_11.sv",
"rtl/Repeater_13.sv",
"rtl/Repeater_14.sv",
"rtl/Repeater_1.sv",
"rtl/Repeater_2.sv",
"rtl/Repeater_3.sv",
"rtl/Repeater_5.sv",
"rtl/Repeater_6.sv",
"rtl/Repeater_7.sv",
"rtl/Repeater_8.sv",
"rtl/Repeater_9.sv",
"rtl/Repeater.sv",
"rtl/ResetCatchAndSync_d3.sv",
"rtl/ResetSynchronizerShiftReg_w1_d3_i0.sv",
"rtl/Rob.sv",
"rtl/RoundAnyRawFNToRecFN_1.sv",
"rtl/RoundAnyRawFNToRecFN_2.sv",
"rtl/RoundAnyRawFNToRecFN_3.sv",
"rtl/RoundAnyRawFNToRecFN_4.sv",
"rtl/RoundAnyRawFNToRecFN_5.sv",
"rtl/RoundAnyRawFNToRecFN_7.sv",
"rtl/RoundAnyRawFNToRecFN.sv",
"rtl/RoundRawFNToRecFN_1.sv",
"rtl/RoundRawFNToRecFN_2.sv",
"rtl/RoundRawFNToRecFN.sv",
"rtl/RVCExpander.sv",
"rtl/ScratchpadBank.sv",
"rtl/sdq_17x64.sv",
"rtl/SerialRAM.sv",
"rtl/SinkA.sv",
"rtl/SinkC.sv",
"rtl/SinkD.sv",
"rtl/SinkE.sv",
"rtl/SinkX.sv",
"rtl/SourceA.sv",
"rtl/SourceB.sv",
"rtl/SourceC.sv",
"rtl/SourceD.sv",
"rtl/SourceE.sv",
"rtl/SourceX.sv",
"rtl/SynchronizerShiftReg_w1_d3.sv",
"rtl/SystemBus_1.sv",
"rtl/SystemBus.sv",
"rtl/table_128x44.sv",
"rtl/table_128x52.sv",
"rtl/table_256x48.sv",
"rtl/tag_array_64x168.sv",
"rtl/tag_array_64x184.sv",
"rtl/TageBranchPredictorBank.sv",
"rtl/TageTable_1.sv",
"rtl/TageTable_2.sv",
"rtl/TageTable_3.sv",
"rtl/TageTable_4.sv",
"rtl/TageTable_5.sv",
"rtl/TageTable.sv",
"rtl/tail_21x6.sv",
"rtl/tail_2x4.sv",
"rtl/tail_40x6.sv",
"rtl/TestHarness.sv",
"rtl/TileClockGater.sv",
"rtl/TilePRCIDomain.sv",
"rtl/TileResetSetter.sv",
"rtl/TLAsyncCrossingSink.sv",
"rtl/TLAsyncCrossingSource.sv",
"rtl/TLAtomicAutomata_1.sv",
"rtl/TLAtomicAutomata.sv",
"rtl/TLBroadcast.sv",
"rtl/TLBroadcastTracker_1.sv",
"rtl/TLBroadcastTracker_2.sv",
"rtl/TLBroadcastTracker_3.sv",
"rtl/TLBroadcastTracker.sv",
"rtl/TLB.sv",
"rtl/TLBuffer_12.sv",
"rtl/TLBuffer_16.sv",
"rtl/TLBuffer_1.sv",
"rtl/TLBuffer_20.sv",
"rtl/TLBuffer_21.sv",
"rtl/TLBuffer_22.sv",
"rtl/TLBuffer_2.sv",
"rtl/TLBuffer_3.sv",
"rtl/TLBuffer_4.sv",
"rtl/TLBuffer_5.sv",
"rtl/TLBuffer_6.sv",
"rtl/TLBuffer_8.sv",
"rtl/TLBuffer.sv",
"rtl/TLBusBypassBar.sv",
"rtl/TLBusBypass.sv",
"rtl/TLCacheCork.sv",
"rtl/TLDebugModuleInnerAsync.sv",
"rtl/TLDebugModuleInner.sv",
"rtl/TLDebugModuleOuterAsync.sv",
"rtl/TLDebugModuleOuter.sv",
"rtl/TLDebugModule.sv",
"rtl/TLError_1.sv",
"rtl/TLError.sv",
"rtl/TLFIFOFixer_1.sv",
"rtl/TLFIFOFixer_2.sv",
"rtl/TLFIFOFixer_3.sv",
"rtl/TLFIFOFixer_4.sv",
"rtl/TLFIFOFixer_5.sv",
"rtl/TLFIFOFixer.sv",
"rtl/TLFragmenter_10.sv",
"rtl/TLFragmenter_11.sv",
"rtl/TLFragmenter_1.sv",
"rtl/TLFragmenter_2.sv",
"rtl/TLFragmenter_3.sv",
"rtl/TLFragmenter_4.sv",
"rtl/TLFragmenter_5.sv",
"rtl/TLFragmenter_6.sv",
"rtl/TLFragmenter_7.sv",
"rtl/TLFragmenter_8.sv",
"rtl/TLFragmenter_9.sv",
"rtl/TLFragmenter.sv",
"rtl/TLInterconnectCoupler_10.sv",
"rtl/TLInterconnectCoupler_12.sv",
"rtl/TLInterconnectCoupler_13.sv",
"rtl/TLInterconnectCoupler_15.sv",
"rtl/TLInterconnectCoupler_4.sv",
"rtl/TLInterconnectCoupler_5.sv",
"rtl/TLInterconnectCoupler_6.sv",
"rtl/TLInterconnectCoupler_7.sv",
"rtl/TLInterconnectCoupler_9.sv",
"rtl/TLMonitor_10.sv",
"rtl/TLMonitor_11.sv",
"rtl/TLMonitor_12.sv",
"rtl/TLMonitor_13.sv",
"rtl/TLMonitor_14.sv",
"rtl/TLMonitor_15.sv",
"rtl/TLMonitor_16.sv",
"rtl/TLMonitor_17.sv",
"rtl/TLMonitor_18.sv",
"rtl/TLMonitor_19.sv",
"rtl/TLMonitor_1.sv",
"rtl/TLMonitor_20.sv",
"rtl/TLMonitor_21.sv",
"rtl/TLMonitor_22.sv",
"rtl/TLMonitor_23.sv",
"rtl/TLMonitor_24.sv",
"rtl/TLMonitor_25.sv",
"rtl/TLMonitor_26.sv",
"rtl/TLMonitor_27.sv",
"rtl/TLMonitor_28.sv",
"rtl/TLMonitor_29.sv",
"rtl/TLMonitor_2.sv",
"rtl/TLMonitor_30.sv",
"rtl/TLMonitor_31.sv",
"rtl/TLMonitor_32.sv",
"rtl/TLMonitor_33.sv",
"rtl/TLMonitor_34.sv",
"rtl/TLMonitor_35.sv",
"rtl/TLMonitor_36.sv",
"rtl/TLMonitor_37.sv",
"rtl/TLMonitor_38.sv",
"rtl/TLMonitor_39.sv",
"rtl/TLMonitor_3.sv",
"rtl/TLMonitor_40.sv",
"rtl/TLMonitor_41.sv",
"rtl/TLMonitor_42.sv",
"rtl/TLMonitor_43.sv",
"rtl/TLMonitor_44.sv",
"rtl/TLMonitor_45.sv",
"rtl/TLMonitor_46.sv",
"rtl/TLMonitor_47.sv",
"rtl/TLMonitor_48.sv",
"rtl/TLMonitor_49.sv",
"rtl/TLMonitor_4.sv",
"rtl/TLMonitor_50.sv",
"rtl/TLMonitor_51.sv",
"rtl/TLMonitor_52.sv",
"rtl/TLMonitor_53.sv",
"rtl/TLMonitor_54.sv",
"rtl/TLMonitor_55.sv",
"rtl/TLMonitor_56.sv",
"rtl/TLMonitor_57.sv",
"rtl/TLMonitor_58.sv",
"rtl/TLMonitor_59.sv",
"rtl/TLMonitor_5.sv",
"rtl/TLMonitor_60.sv",
"rtl/TLMonitor_61.sv",
"rtl/TLMonitor_62.sv",
"rtl/TLMonitor_63.sv",
"rtl/TLMonitor_64.sv",
"rtl/TLMonitor_65.sv",
"rtl/TLMonitor_66.sv",
"rtl/TLMonitor_67.sv",
"rtl/TLMonitor_68.sv",
"rtl/TLMonitor_69.sv",
"rtl/TLMonitor_6.sv",
"rtl/TLMonitor_70.sv",
"rtl/TLMonitor_71.sv",
"rtl/TLMonitor_72.sv",
"rtl/TLMonitor_73.sv",
"rtl/TLMonitor_7.sv",
"rtl/TLMonitor_8.sv",
"rtl/TLMonitor_9.sv",
"rtl/TLMonitor.sv",
"rtl/TLPLIC.sv",
"rtl/TLRAM_1.sv",
"rtl/TLRAM_2.sv",
"rtl/TLRAM.sv",
"rtl/TLROM.sv",
"rtl/TLSerdesser_1.sv",
"rtl/TLSerdesser.sv",
"rtl/TLUART.sv",
"rtl/TLWidthWidget_10.sv",
"rtl/TLWidthWidget_9.sv",
"rtl/TLXbar_10.sv",
"rtl/TLXbar_12.sv",
"rtl/TLXbar_13.sv",
"rtl/TLXbar_2.sv",
"rtl/TLXbar_4.sv",
"rtl/TLXbar_5.sv",
"rtl/TLXbar_6.sv",
"rtl/TLXbar_8.sv",
"rtl/TLXbar.sv",
"rtl/TSIToTileLink.sv",
"rtl/UARTAdapter.sv",
"rtl/UARTRx.sv",
"rtl/UARTTx.sv",
"rtl/UOPCodeFDivDecoder.sv",
"rtl/UOPCodeFPUDecoder.sv",
]

nonrams = [
"ram_2x5",
"ram_2x40",
"ram_5x1",
"ram_8x8"]

rams = [
"ram_256x8",
"ram_combMem_0",
"ram_combMem",
"ram_data_3x64",
"ram_index_combMem_0",
"ram_index_combMem",
"ram_mask_2x16",
"ram_mask_combMem_0",
"ram_mask_combMem_1",
"ram_mask_combMem_2",
"ram_mask_combMem",
"ram_meta_0_combMem_0",
"ram_meta_0_combMem",
"ram_meta_2x120",
"ram_opcode_combMem_0",
"ram_opcode_combMem_1",
"ram_opcode_combMem",
"ram_pc_combMem_0",
"ram_pc_combMem",
"ram_predicated_combMem_0",
"ram_predicated_combMem_1",
"ram_predicated_combMem",
"ram_set_combMem",
"ram_size_combMem_0",
"ram_size_combMem_1",
"ram_size_combMem",
"ram_tl_state_source_combMem_0",
"ram_tl_state_source_combMem"]

execunits = ['ALUExeUnit_2', 'ALUExeUnit_3', 'ALUExeUnit_4', 'ALUExeUnit_5', 'ALUExeUnit']

exeunitsrc =  [ "rtl/ALU.sv",
        "rtl/AMOALU.sv",
        "rtl/PipelinedMulUnit.sv",
        "rtl/ALUUnit_1.sv",
        "rtl/ALUUnit_2.sv",
        "rtl/ALUUnit.sv",
        "rtl/DivUnit.sv",
        "rtl/MemAddrCalcUnit.sv",
        "rtl/BranchKillableQueue_8.sv",
        "rtl/BranchKillableQueue_9.sv",
        "rtl/BranchKillableQueue_10.sv",
        "rtl/BranchKillableQueue_11.sv",
        "rtl/BranchKillableQueue.sv",
        "rtl/IntToFPUnit.sv",
        "rtl/MulDiv.sv",
        "rtl/PipelinedMultiplier.sv",
        "rtl/IntToFP.sv",
        "rtl/UOPCodeFPUDecoder.sv",
        "rtl/ram_5x1.sv",
        "rtl/INToRecFN_1.sv",
        "rtl/INToRecFN.sv",
        "rtl/RoundAnyRawFNToRecFN.sv",
        "rtl/RoundAnyRawFNToRecFN_1.sv"]

[build_openroad(
        name = exe,
        verilog_files=["rtl/" + exe + ".sv"] + exeunitsrc,
        stage_sources={'synth': ["constraints.sdc"]},
        stage_args={
                'floorplan': ['CORE_UTILIZATION=5',
                'CORE_ASPECT_RATIO=8',
                "RTLMP_FLOW=True"],
                'place': ['PLACE_DENSITY=0.2000'],
                'route': ['BLAH=6']
                }
        )
 for exe in execunits]

 #'RegisterFileSynthesizable',

renamefiles = ["rtl/RenameBusyTable.sv",
        "rtl/RenameBusyTable_1.sv",
        "rtl/RenameFreeList.sv",
        "rtl/RenameFreeList_1.sv",
        "rtl/RenameMapTable.sv",
        "rtl/RenameMapTable_1.sv"]

fpfiles = ["rtl/FpPipeline.sv",
        "rtl/ram_7x79.sv",
        "rtl/ram_3x79.sv",
        "rtl/Arbiter_16.sv",
        "rtl/RegisterRead.sv",
        "rtl/RegisterFileSynthesizable.sv",
        "rtl/IssueUnitCollapsing.sv",
        "rtl/FPUExeUnit_1.sv",
        "rtl/FPUExeUnit.sv",
        "rtl/BranchKillableQueue_10.sv",
        "rtl/BranchKillableQueue_11.sv",
        "rtl/FDivSqrtUnit.sv",
        "rtl/FPUUnit.sv",
        "rtl/IssueSlot.sv",
        "mock/regfile_128x65.sv",
        "rtl/RegisterReadDecode_1.sv",
        "rtl/RegisterReadDecode.sv",
        "rtl/FPU.sv",
        "rtl/RecFNToRecFN.sv",
        "rtl/RecFNToRecFN_1.sv",
        "rtl/DivSqrtRecF64.sv",
        "rtl/UOPCodeFDivDecoder.sv",
        "rtl/ram_data_3x64.sv",
        "rtl/RoundAnyRawFNToRecFN_5.sv",
        "rtl/Mul54.sv",
        "rtl/DivSqrtRecF64_mulAddZ31.sv",
        "rtl/RoundAnyRawFNToRecFN_4.sv",
        "rtl/FPToFP.sv",
        "rtl/FPToInt.sv",
        "rtl/FMADecoder.sv",
        "rtl/FPUFMAPipe_1.sv",
        "rtl/FPUFMAPipe.sv",
        "rtl/UOPCodeFPUDecoder.sv",
        "rtl/MulAddRecFNPipe.sv",
        "rtl/MulAddRecFNPipe_1.sv",
        "rtl/RecFNToIN_1.sv",
        "rtl/RecFNToIN.sv",
        "rtl/CompareRecFN.sv",
        "rtl/RoundRawFNToRecFN_2.sv",
        "rtl/DivSqrtRecF64ToRaw_mulAddZ31.sv",
        "rtl/RoundAnyRawFNToRecFN_7.sv",
        "rtl/RoundRawFNToRecFN_1.sv",
        "rtl/MulAddRecFNToRaw_postMul_1.sv",
        "rtl/MulAddRecFNToRaw_preMul_1.sv",
        "rtl/RoundRawFNToRecFN.sv",
        "rtl/MulAddRecFNToRaw_postMul.sv",
        "rtl/MulAddRecFNToRaw_preMul.sv",
        "rtl/RoundAnyRawFNToRecFN_2.sv",
        "rtl/RoundAnyRawFNToRecFN_3.sv"]

build_openroad(
        name = "FpPipeline",
        verilog_files=fpfiles,
        macros=["regfile_128x65"],
        stage_sources={'synth': ["constraints.sdc"]},
        stage_args={
                'synth': ['SYNTH_HIERARCHICAL=1'],
                'floorplan': [
                        'CORE_UTILIZATION=30',
                        'CORE_MARGIN=4',
                        #"DIE_AREA=0 0 350 350", "CORE_AREA=4 4 346 346",
                        #'MACRO_PLACE_HALO=20 20',
                        'RTLMP_FLOW=True'
                        ],
                'place': ['PLACE_DENSITY=0.42',
                'PLACE_PINS_ARGS=-annealing'],
                'route': ['SKIP_INCREMENTAL_REPAIR=1']
                },
        mock_abstract=True,
        mock_stage='floorplan',
        mock_area=0.2
        )




registerreadsrc = ["rtl/RegisterRead_1.sv",
        "rtl/RegisterReadDecode_6.sv",
        "rtl/RegisterReadDecode_5.sv",
        "rtl/RegisterReadDecode_2.sv",
        "rtl/RegisterReadDecode_4.sv"
        ]

build_openroad(
        name = "RegisterRead_1",
        verilog_files=registerreadsrc,
        stage_sources={'synth': ["constraints.sdc"]},
        stage_args={'floorplan':['CORE_UTILIZATION=5',
        'CORE_ASPECT_RATIO=4'],
        'place': ['PLACE_DENSITY=0.20']}
        )

issueslotfiles = ["rtl/IssueUnitCollapsing_1.sv", "rtl/IssueUnitCollapsing_2.sv",
        "rtl/IssueSlot_32.sv"]

[build_openroad(
        name = exe,
        verilog_files=issueslotfiles,
        stage_sources={'synth': ["constraints.sdc"]},
        stage_args={'floorplan':['CORE_UTILIZATION=10'],
        'place': ['PLACE_DENSITY=0.20']}
        )
 for exe in ['IssueUnitCollapsing_1', 'IssueUnitCollapsing_2']]


build_openroad(
        name = "Rob",
        verilog_files=["rtl/Rob.sv"],
        stage_sources={'synth': ["constraints.sdc"]},
        stage_args={'floorplan':['CORE_UTILIZATION=3'],
        'place': ['PLACE_DENSITY=0.05']}
        )

build_openroad(
        name = "DecodeUnit",
        verilog_files=["rtl/DecodeUnit.sv"],
        stage_sources={'synth': ["constraints.sdc"]},
        stage_args={'floorplan':['CORE_UTILIZATION=20',
        'CORE_ASPECT_RATIO=4'],
        'place': ['PLACE_DENSITY=0.40']}
        )

build_openroad(
        name = "BoomCore",
        verilog_files=["rtl/BoomCore.sv",
        "rtl/Arbiter_18.sv",
        "rtl/CSRFile.sv",
        "rtl/Arbiter_19.sv",
        "rtl/BasicDispatcher.sv",
        "rtl/BranchMaskGenerationLogic.sv",
        "rtl/DecodeUnit.sv",
        "rtl/ALUExeUnit.sv",
        "rtl/ALUExeUnit_2.sv",
        "rtl/ALUExeUnit_3.sv",
        "rtl/ALUExeUnit_4.sv",
        "rtl/ALUExeUnit_5.sv"
        ] + exeunitsrc + registerreadsrc,
        macros=["FpPipeline",
        "IssueUnitCollapsing_1",
        "IssueUnitCollapsing_2",
        "Rob",
        "RenameStage",
        "RenameStage_1",
        "RegisterRead_1",
        "RegisterFileSynthesizable_1"] +
        execunits,
        stage_sources={'synth': ["constraints-top.sdc"]},
        stage_args={
                'floorplan': ['CORE_UTILIZATION=10','MACRO_PLACE_HALO=50 50'],
                'place': ['PLACE_DENSITY=0.20']}
        )

boom_tile_small_srams = [
        "tag_array_64x184",
        "tag_array_64x168",
        "data_2048x2",
        "table_256x48",
        "table_128x52",
        "table_128x44",
        "btb_128x56",
        "meta_128x120",
        "lb_32x128",
        "sdq_17x64",
        "data_2048x8",
        "mem_256x4",
        "data_16x65",
        "data_33x48",
        "data_40x73",
        "ram_12x110"]

boom_tile_rams = [
        "l2_tlb_ram_0_512x46",
        "ebtb_128x40",
        "array_256x128",
        "dataArrayB_256x64",
        "l2_tlb_ram_0_512x45"]

digital_top_srams=["cc_dir_1024x168",
"data_data_40x128",
"ghist_40x64",
"meta_40x240",
"ram_256x8"]


[build_openroad(
        name = ram,
        io_constraints="io-sram.tcl",
        verilog_files=[{'array_256x128':'mock',
        'cc_dir_1024x168':'mock',
        'data_2048x2':'mock',
        'dataArrayB_256x64':'mock',
        'data_data_40x128':'mock',
        'ebtb_128x40':'mock',
        'ghist_40x64':'mock',
        'l2_tlb_ram_0_512x45':'mock'}.get(ram, "rtl") + "/" + ram + ".sv"],
        stage_sources={'synth': ["constraints-sram.sdc", "util.tcl"],
        'floorplan': ["util.tcl"],
        'place': ["util.tcl"]},
        stage_args={
                'floorplan': ['CORE_UTILIZATION=40',
                        'CORE_ASPECT_RATIO=2'],
                'place': ['PLACE_DENSITY=0.65']},
        mock_abstract=True,
        mock_stage='floorplan',
        mock_area={'tag_array_64x184':0.20,
        'meta_40x240':1,
        'data_data_40x128':1,
        'lb_32x128':1}.get(ram, 0.5)
        )
 for ram in boom_tile_rams + boom_tile_small_srams + digital_top_srams]

big_rams = ['mem_8192x64', 'cc_banks_16384x64', 'TLROM']

[build_openroad(
        name = ram,
        io_constraints="io-sram.tcl",
        verilog_files=["mock/" + ram + ".sv"],
        stage_sources={'synth': ["constraints-sram.sdc", "util.tcl"],
        'floorplan': ["util.tcl"],
        'place': ["util.tcl"]},
        stage_args={
                'floorplan': ['CORE_UTILIZATION=40',
                        'CORE_ASPECT_RATIO=2'],
                'place': ['PLACE_DENSITY=0.65']},
        mock_abstract=True,
        mock_stage='floorplan',
        mock_area=0.30
        ) for ram in big_rams if ram != 'TLROM']

build_openroad(
        name = "TLROM",
        io_constraints="io.tcl",
        verilog_files=["rtl/TLROM.sv",
        "rtl/TLMonitor_54.sv",
        "rtl/plusarg_reader.v"],
        stage_sources={'synth': ["constraints.sdc", "util.tcl"],
        'floorplan': ["util.tcl"],
        'place': ["util.tcl"]},
        stage_args={
                'floorplan': ['CORE_UTILIZATION=40',
                        'CORE_ASPECT_RATIO=2'],
                'place': ['PLACE_DENSITY=0.65']},
        mock_abstract=True,
        mock_stage='floorplan',
        mock_area=0.30
        )

boom_regfile_rams = [
        "regfile_128x64",
        "regfile_128x65"]

[build_openroad(
        name = ram,
        io_constraints="io-sram.tcl",
        verilog_files=["mock/" + ram + ".sv"],
        stage_sources={'synth': ["constraints-sram.sdc", "util.tcl"],
        'floorplan': ['util.tcl'],
        'place': ["util.tcl"]},
        stage_args={
                'floorplan': ([] +
                        #'CORE_UTILIZATION=200',
                        #"'CORE_ASPECT_RATIO=4'"
                        (["DIE_AREA=0 0 400 400",
                        "CORE_AREA=2 2 298 298"] if ram in ("regfile_128x65","regfile_128x64") else
                        ["DIE_AREA=0 0 10 10",
                        "CORE_AREA=2 2 8 8"])),
                'place': ['PLACE_DENSITY=' +
                {'regfile_128x64':'0.42', 'regfile_128x65':'0.3'}.get(ram, '0.10')],
        },
        mock_abstract=True,
        mock_stage='floorplan',
        mock_area={'regfile_128x64':0.4, 'regfile_128x65':0.4}.get(ram, 0.8)
        )
 for ram in boom_regfile_rams]


boomtilefiles = ["rtl/" + f + ".sv" for f in ['TLXbar_8',
        'IntXbar_1',
        'IntXbar',
        'TLWidthWidget_8',
        'BoomNonBlockingDCache',
        'BoomFrontend',
        'TLWidthWidget_9',
        'TLBuffer_13',
        'LSU',
        'PTW',
        'HellaCacheArbiter',
        'Arbiter_14',
        'AMOALU',
        'BoomWritebackUnit',
        'BoomProbeUnit',
        'BoomMSHRFile',
        'L1MetadataArray',
        'L1MetadataArray',
        'Arbiter_9',
        'Arbiter_10',
        'BoomDuplicatedDataArray',
        'Arbiter_11',
        'Arbiter_12',
        'MaxPeriodFibonacciLFSR',
        'Arbiter_13',
        'Arbiter_14',
        'ICache',
        'BranchPredictor',
        'BoomRAS',
        'TLB',
        'Queue_66',
        'Queue_67',
        'RVCExpander',
        'RVCExpander',
        'BranchDecode',
        'Queue_68',
        'Queue_69',
        'FetchBuffer',
        'FetchTargetQueue',
        'Arbiter_15',
        'TLWidthWidget_9',
        'TLBuffer_13',
        'LSU',
        'PTW',
        'HellaCacheArbiter',
        'ForwardingAgeLogic',
        'NBDTLB',
        'OptimizationBarrier_93',
        'OptimizationBarrier_92',
        'Arbiter_20',
        'OptimizationBarrier_14',
        'PMPChecker_1',
        'ComposedBranchPredictorBank',
        'OptimizationBarrier',
        'PMPChecker',
        'ram_meta_2x120',
        'ghist_40x5',
        'ghist_40x1',
        'ghist_40x64',
        'meta_40x240',
        'BoomIOMSHR',
        'Arbiter_8',
        'BoomMSHR',
        'Arbiter_7',
        'Arbiter_6',
        'Arbiter_5',
        'Arbiter_4',
        'Arbiter_3',
        'Arbiter_2',
        'Arbiter_1',
        'Arbiter',
        'lb_32x128',
        'sdq_17x64',
        'NLPrefetcher',
        'FAMicroBTBBranchPredictorBank',
        'BIMBranchPredictorBank',
        'BTBBranchPredictorBank',
        'TageBranchPredictorBank',
        'LoopBranchPredictorBank',
        'LoopBranchPredictorColumn',
        'MaxPeriodFibonacciLFSR_3',
        'TageTable_5',
        'TageTable_4',
        'TageTable_3',
        'TageTable_2',
        'TageTable_1',
        'TageTable',
        'mem_128x1',
        'table_128x44',
        'mem_256x1',
        'table_256x48'
        ] + rams + nonrams + boom_tile_small_srams]

build_openroad(
        name = "BoomTile",
        verilog_files=["rtl/BoomTile.sv",
        "rtl/Rob.sv",
        "rtl/DecodeUnit.sv",
        "rtl/BoomCore.sv",
        "rtl/Arbiter_18.sv",
        "rtl/CSRFile.sv",
        "rtl/Arbiter_19.sv",
        "rtl/BasicDispatcher.sv",
        "rtl/BranchMaskGenerationLogic.sv",
        "rtl/ALUExeUnit.sv",
        "rtl/ALUExeUnit_2.sv",
        "rtl/ALUExeUnit_3.sv",
        "rtl/ALUExeUnit_4.sv",
        "rtl/ALUExeUnit_5.sv",
        "rtl/RegisterFileSynthesizable_1.sv",
        "rtl/RenameStage_1.sv",
        "rtl/RenameStage.sv",
        "rtl/RegisterFileSynthesizable.sv"
        ] + exeunitsrc + registerreadsrc + renamefiles + fpfiles +issueslotfiles +
        boomtilefiles,
        macros=boom_tile_rams + boom_regfile_rams + boom_tile_small_srams +
        ["ICache", "BoomNonBlockingDCache"],
        stage_sources={'synth': ["constraints-top.sdc"]},
        stage_args={
                'synth': ['SYNTH_HIERARCHICAL=1'],
                'floorplan': [
                        'CORE_UTILIZATION=40',
                        'MACRO_PLACE_HALO=20 20'
                        # Too slow for now...
                        ,'RTLMP_FLOW=True'
                        ],
                'place': ['PLACE_DENSITY=0.25',
                'PLACE_PINS_ARGS=-annealing'],
                }
        )

build_openroad(
        name = "L1MetadataArray",
        verilog_files=["rtl/L1MetadataArray.sv"],
        variant="test",
        macros=["tag_array_64x184"],
        stage_sources={'synth': ["constraints-top.sdc"],
        'floorplan': ["util.tcl"],
        'place': ["util.tcl"]},
        io_constraints="io.tcl",
        stage_args={
                'synth': ['SYNTH_HIERARCHICAL=1'],
                'floorplan': [
                        'CORE_UTILIZATION=3',
                        'RTLMP_FLOW=True',
                        'CORE_MARGIN=2',
                        ],
                'place': ['PLACE_DENSITY=0.20', 'PLACE_PINS_ARGS=-annealing'],
                },
        mock_abstract=True,
        mock_stage="grt"
        )

build_openroad(
        name = "ICache",
        verilog_files=["rtl/ICache.sv",
        "rtl/MaxPeriodFibonacciLFSR.sv",
        "rtl/dataArrayB_256x64.sv",
        "rtl/tag_array_64x168.sv"],
        macros=["dataArrayB_256x64",        "tag_array_64x168"],
        io_constraints="io.tcl",
        stage_sources={'synth': ["constraints.sdc"],
        'floorplan': ["util.tcl"],
        'place': ["util.tcl"]},
        stage_args={
                'synth': ['SYNTH_HIERARCHICAL=1'],
                'floorplan': [
                        'RTLMP_FLOW=True',
                        'CORE_UTILIZATION=10',
                        # "DIE_AREA=0 0 200 200",
                        # "CORE_AREA=2 2 198 198"
                        ],
                'place': ['PLACE_DENSITY=0.20'],
                },
        mock_abstract=True,
        mock_stage='floorplan',
        mock_area=0.25
        )

build_openroad(
        name = "BoomNonBlockingDCache",
        verilog_files=all_source_files,
        macros=["array_256x128"] +boom_tile_small_srams,
        io_constraints="io.tcl",
        stage_sources={'synth': ["constraints-dcache.sdc"],
        'floorplan': ["util.tcl"],
        'place': ["util.tcl"]},
        stage_args={
                'synth': ['SYNTH_HIERARCHICAL=1'],
                'floorplan': [
                        'RTLMP_FLOW=True',
                        'CORE_UTILIZATION=20',
                        # "DIE_AREA=0 0 200 200",
                        # "CORE_AREA=2 2 198 198"
                        ],
                'place': ['PLACE_DENSITY=0.30'],
                },
        mock_abstract=True,
        mock_stage='floorplan',
        mock_area=0.33
        )



inclusive_cache_files = ['rtl/InclusiveCache.sv',
'rtl/InclusiveCacheControl.sv',
'rtl/InclusiveCacheBankScheduler.sv',
'rtl/SourceA.sv',
'rtl/SourceB.sv',
'rtl/SourceC.sv',
'rtl/SourceD.sv',
'rtl/SourceE.sv',
'rtl/SourceX.sv',
'rtl/SinkA.sv',
'rtl/SinkC.sv',
'rtl/SinkD.sv',
'rtl/SinkE.sv',
'rtl/SinkX.sv',
'rtl/Directory.sv',
'rtl/BankedStore.sv',
'rtl/ListBuffer_2.sv',
'rtl/MSHR.sv',
'rtl/BankedStore.sv',
'rtl/BankedStore.sv',
'rtl/BankedStore.sv',
'rtl/BankedStore.sv',
'rtl/BankedStore.sv',
'rtl/BankedStore.sv',
'rtl/BankedStore.sv',
'rtl/Queue_50.sv',
'rtl/Queue_17.sv',
'rtl/Queue_18.sv',
'rtl/Queue_19.sv',
'rtl/Queue_52.sv',
'rtl/Atomics.sv',
'rtl/ListBuffer.sv',
'rtl/ListBuffer_1.sv',
'rtl/ListBuffer_2.sv',
'rtl/MaxPeriodFibonacciLFSR.sv',
'rtl/cc_dir_1024x168.sv',
'rtl/mem_8192x64.sv',
'rtl/next_16x4.sv',
'rtl/head_21x6.sv',
'rtl/next_40x6.sv',
'rtl/tail_2x4.sv',
'rtl/next_40x6.sv',
'rtl/tail_40x6.sv',
'rtl/head_40x6.sv',
'rtl/TLMonitor_35.sv',
'rtl/TLMonitor_34.sv',
'rtl/plusarg_reader.v']

build_openroad(
        name = "InclusiveCache",
        verilog_files=all_source_files,
        macros=big_rams + digital_top_srams + boom_tile_rams + boom_regfile_rams + boom_tile_small_srams,
        stage_sources={'synth': ["constraints-l2.sdc"]},
        stage_args={
                'synth': ['SYNTH_HIERARCHICAL=1'],
                'floorplan': [
                        'CORE_UTILIZATION=10',
                        # "DIE_AREA=0 0 200 200", "CORE_AREA=2 2 198 198",
                        'MACRO_PLACE_HALO=20 20',
                        'RTLMP_FLOW=True'
                        ],
                'place': ['PLACE_DENSITY=0.28',
                'PLACE_PINS_ARGS=-annealing'],
                'route': ['SKIP_INCREMENTAL_REPAIR=1']
                },
        mock_abstract=True,
        mock_stage='floorplan',
        mock_area=0.1
        )

branch_predictor_files = [
        'rtl/LoopBranchPredictorBank.sv',
        'rtl/BranchPredictor.sv',
        'rtl/BIMBranchPredictorBank.sv',
        'rtl/BranchPredictor_assert.sv',
        'rtl/BranchPredictor.sv',
        'rtl/BTBBranchPredictorBank.sv',
        'rtl/ComposedBranchPredictorBank.sv',
        'rtl/FAMicroBTBBranchPredictorBank.sv',
        'rtl/LoopBranchPredictorBank.sv',
        'rtl/LoopBranchPredictorColumn.sv',
        'rtl/TageBranchPredictorBank.sv',
        'rtl/MaxPeriodFibonacciLFSR_3.sv',
        'rtl/TageTable_5.sv',
        'rtl/TageTable_4.sv',
        'rtl/TageTable_3.sv',
        'rtl/TageTable_2.sv',
        'rtl/TageTable_1.sv',
        'rtl/TageTable.sv',
        'rtl/ebtb_128x40.sv',
        'rtl/btb_128x56.sv',
        'rtl/meta_128x120.sv',
        'rtl/data_2048x2.sv',
        'rtl/table_128x44.sv',
        'rtl/mem_128x1.sv',
        'rtl/table_256x48.sv',
        'rtl/mem_256x1.sv',
        'rtl/table_128x52.sv'
]

build_openroad(
        name = "BranchPredictor",
        verilog_files=all_source_files,
        macros=['data_2048x8',
        'mem_256x4',
        'ebtb_128x40',
        'btb_128x56',
        'meta_128x120',
        'data_2048x2',
        'table_128x44',
        'table_256x48',
        'table_128x52'],
        stage_sources={'synth': ["constraints-branchpredictor.sdc"],
        'floorplan': ["util.tcl"],
        'place': ["util.tcl"]},
        stage_args={
                'synth': ['SYNTH_HIERARCHICAL=1'],
                'floorplan': [
                        'CORE_UTILIZATION=10',
                        'CORE_ASPECT_RATIO=4',
                        #"DIE_AREA=0 0 500 500", "CORE_AREA=2 2 498 498",
                        'MACRO_PLACE_HALO=20 20',
                        'RTLMP_FLOW=True'
                        ],
                'place': ['PLACE_DENSITY=0.28',
                'PLACE_PINS_ARGS=-annealing'],
                'route': ['SKIP_INCREMENTAL_REPAIR=1']
                },
        io_constraints="io.tcl",
        mock_abstract=True,
        mock_stage='floorplan',
        mock_area=0.15
        )

build_openroad(
        name = "ChipTop",
        verilog_files=all_source_files,
        macros=digital_top_srams + boom_tile_rams + boom_regfile_rams + boom_tile_small_srams +
        ["BranchPredictor", "FpPipeline", "ICache", "BoomNonBlockingDCache", "InclusiveCache"] +
        big_rams,
        stage_sources={'synth': ["constraints-chiptop.sdc"]},
        stage_args={
                'synth': ['SYNTH_HIERARCHICAL=1'],
                'floorplan': [
                        #'CORE_UTILIZATION=50',
                        'MACRO_PLACE_HALO=20 20',
                        'RTLMP_FLOW=True',
                        "DIE_AREA=0 0 1000 1000", "CORE_AREA=2 2 998 998"
                        ],
                'place': ['PLACE_DENSITY=0.30',
                'PLACE_PINS_ARGS=-annealing'],
                'route': ['SKIP_INCREMENTAL_REPAIR=1'],
                #'grt': ["GLOBAL_ROUTE_ARGS=-congestion_iterations 100 -congestion_report_iter_step 5 -verbose"]
                }
        )

build_openroad(
        name = "DigitalTop",
        verilog_files=all_source_files,
        macros=digital_top_srams + boom_tile_rams + boom_regfile_rams + boom_tile_small_srams +
        ["BranchPredictor", "FpPipeline", "ICache", "BoomNonBlockingDCache", "InclusiveCache"],
        stage_sources={'synth': ["constraints-digitaltop.sdc"]},
        stage_args={
                'synth': ['SYNTH_HIERARCHICAL=1'],
                'floorplan': [
                        #'CORE_UTILIZATION=50',
                        'MACRO_PLACE_HALO=20 20',
                        'RTLMP_FLOW=True',
                        "DIE_AREA=0 0 1000 1000", "CORE_AREA=2 2 998 998"
                        ],
                'place': ['PLACE_DENSITY=0.23',
                'PLACE_PINS_ARGS=-annealing'],
                'route': ['SKIP_INCREMENTAL_REPAIR=1']
                }
        )
