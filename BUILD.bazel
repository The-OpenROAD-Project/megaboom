load("@bazel-orfs//:openroad.bzl", "build_openroad", "add_options_all_stages", "create_out_rule")
create_out_rule()

filegroup(
    name = "util",
    srcs = [
        "util.tcl",
    ],
)

filegroup(
    name = "io-sram",
    srcs = [
        "io-sram.tcl",
        ":util",
    ],
    visibility = [":__subpackages__"],
)

filegroup(
    name = "io-boomtile",
    srcs = [
        "io-boomtile.tcl",
        ":util",
    ],
)

filegroup(
    name = "io",
    srcs = [
        "io.tcl",
        ":util",
    ],
)

filegroup(
    name = "io-top",
    srcs = [
        "io-top.tcl",
        ":util",
    ],
)

filegroup(
    name = "constraints-sram",
    srcs = [
        "constraints-sram.sdc",
        ":util",
    ],
    visibility = [":__subpackages__"],
)


all_source_files = [
"rtl/ALUExeUnit_2.sv",
"rtl/ALUExeUnit_3.sv",
"rtl/ALUExeUnit_4.sv",
"rtl/ALUExeUnit_5.sv",
"rtl/ALUExeUnit.sv",
"rtl/ALU.sv",
"rtl/ALUUnit_1.sv",
"rtl/ALUUnit_2.sv",
"rtl/ALUUnit.sv",
"rtl/AMOALU.sv",
"rtl/Arbiter_10.sv",
"rtl/Arbiter_11.sv",
"rtl/Arbiter_12.sv",
"rtl/Arbiter_13.sv",
"rtl/Arbiter_14.sv",
"rtl/Arbiter_15.sv",
"rtl/Arbiter_16.sv",
"rtl/Arbiter_18.sv",
"rtl/Arbiter_19.sv",
"rtl/Arbiter_1.sv",
"rtl/Arbiter_20.sv",
"rtl/Arbiter_2.sv",
"rtl/Arbiter_3.sv",
"rtl/Arbiter_4.sv",
"rtl/Arbiter_5.sv",
"rtl/Arbiter_6.sv",
"rtl/Arbiter_7.sv",
"rtl/Arbiter_8.sv",
"rtl/Arbiter_9.sv",
"rtl/Arbiter.sv",
"mock/array_256x128.sv",
"rtl/AsyncQueueSink_1.sv",
"rtl/AsyncQueueSink_2.sv",
"rtl/AsyncQueueSink_3.sv",
"rtl/AsyncQueueSink.sv",
"rtl/AsyncQueueSource_1.sv",
"rtl/AsyncQueueSource_2.sv",
"rtl/AsyncQueueSource_3.sv",
"rtl/AsyncQueueSource.sv",
"rtl/AsyncQueue.sv",
"rtl/AsyncResetRegVec_w1_i1.sv",
"rtl/AsyncResetRegVec_w2_i0.sv",
"rtl/AsyncResetSynchronizerPrimitiveShiftReg_d3_i0.sv",
"rtl/AsyncResetSynchronizerShiftReg_w1_d3_i0_1.sv",
"rtl/AsyncResetSynchronizerShiftReg_w1_d3_i0.sv",
"rtl/AsyncResetSynchronizerShiftReg_w4_d3_i0.sv",
"rtl/AsyncValidSync.sv",
"rtl/BankBinder.sv",
"rtl/BasicDispatcher.sv",
"rtl/BIMBranchPredictorBank.sv",
"rtl/BoomCore.sv",
"rtl/BoomDuplicatedDataArray.sv",
"rtl/BoomFrontend.sv",
"rtl/BoomIOMSHR.sv",
"rtl/BoomMSHRFile.sv",
"rtl/BoomMSHR.sv",
"rtl/BoomNonBlockingDCache.sv",
"rtl/BoomProbeUnit.sv",
"rtl/BoomRAS.sv",
"rtl/BoomTile.sv",
"rtl/BoomWritebackUnit.sv",
"rtl/BranchDecode.sv",
"rtl/BranchKillableQueue_10.sv",
"rtl/BranchKillableQueue_11.sv",
"rtl/BranchKillableQueue_8.sv",
"rtl/BranchKillableQueue_9.sv",
"rtl/BranchKillableQueue.sv",
"rtl/BranchMaskGenerationLogic.sv",
"rtl/BranchPredictor.sv",
"rtl/BroadcastFilter.sv",
"rtl/btb_128x56.sv",
"rtl/BTBBranchPredictorBank.sv",
"rtl/BundleBridgeNexus_16.sv",
"rtl/CaptureChain.sv",
"rtl/CaptureUpdateChain_1.sv",
"rtl/CaptureUpdateChain_2.sv",
"rtl/CaptureUpdateChain.sv",
"rtl/ChipTop.sv",
"rtl/CLINT.sv",
"rtl/ClockCrossingReg_w15.sv",
"rtl/ClockCrossingReg_w43.sv",
"rtl/ClockCrossingReg_w4.sv",
"rtl/ClockCrossingReg_w55.sv",
"rtl/ClockGroupAggregator_7.sv",
"rtl/ClockGroupCombiner.sv",
"rtl/ClockGroupParameterModifier_1.sv",
"rtl/ClockGroupParameterModifier.sv",
"rtl/ClockGroupResetSynchronizer.sv",
"rtl/ClockSinkDomain_1.sv",
"rtl/ClockSinkDomain_2.sv",
"rtl/ClockSinkDomain_3.sv",
"rtl/ClockSinkDomain.sv",
#"rtl/ClockSourceAtFreqMHz.v",
"rtl/CoherenceManagerWrapper.sv",
"rtl/CompareRecFN.sv",
"rtl/ComposedBranchPredictorBank.sv",
"rtl/CSRFile.sv",
"mock/data_2048x8.sv",
"mock/dataArrayB_256x64.sv",
"rtl/DebugTransportModuleJTAG.sv",
"rtl/DecodeUnit.sv",
"rtl/DigitalTop.sv",
"rtl/DivSqrtRecF64_mulAddZ31.sv",
"rtl/DivSqrtRecF64.sv",
"rtl/DivSqrtRecF64ToRaw_mulAddZ31.sv",
"rtl/DivUnit.sv",
"rtl/DMIToTL.sv",
"mock/ebtb_128x40.sv",
"rtl/EICG_wrapper.v",
"rtl/ErrorDeviceWrapper.sv",
"rtl/extern_modules.sv",
"rtl/FAMicroBTBBranchPredictorBank.sv",
"rtl/FDivSqrtUnit.sv",
"rtl/FetchBuffer.sv",
"rtl/FetchTargetQueue.sv",
"rtl/FixedClockBroadcast_3.sv",
"rtl/FixedClockBroadcast_6.sv",
"rtl/FixedClockBroadcast.sv",
"rtl/FMADecoder.sv",
"rtl/ForwardingAgeLogic.sv",
"rtl/FpPipeline.sv",
"rtl/FPToFP.sv",
"rtl/FPToInt.sv",
"rtl/FPUExeUnit_1.sv",
"rtl/FPUExeUnit.sv",
"rtl/FPUFMAPipe_1.sv",
"rtl/FPUFMAPipe.sv",
"rtl/FPU.sv",
"rtl/FPUUnit.sv",
"rtl/GenericDeserializer.sv",
"rtl/GenericDigitalInIOCell.v",
"rtl/GenericDigitalOutIOCell.v",
"rtl/GenericSerializer.sv",
"rtl/ghist_40x72.sv",
"rtl/HellaCacheArbiter.sv",
"rtl/HellaPeekingArbiter.sv",
"rtl/ICache.sv",
"rtl/INToRecFN_1.sv",
"rtl/INToRecFN.sv",
"rtl/IntSyncAsyncCrossingSink.sv",
"rtl/IntSyncCrossingSource_4.sv",
"rtl/IntSyncCrossingSource_5.sv",
"rtl/IntSyncSyncCrossingSink.sv",
"rtl/IntToFP.sv",
"rtl/IntToFPUnit.sv",
"rtl/IntXbar_1.sv",
"rtl/IssueSlot_32.sv",
"rtl/IssueSlot.sv",
"rtl/IssueUnitCollapsing_1.sv",
"rtl/IssueUnitCollapsing_2.sv",
"rtl/IssueUnitCollapsing.sv",
"rtl/JtagBypassChain.sv",
"rtl/JtagStateMachine.sv",
"rtl/JtagTapController.sv",
"rtl/L1MetadataArray.sv",
"mock/l2_tlb_ram_0_512x46.sv",
"rtl/lb_32x128.sv",
"rtl/LoopBranchPredictorBank.sv",
"rtl/LoopBranchPredictorColumn.sv",
"rtl/LSU.sv",
"rtl/MaxPeriodFibonacciLFSR_2.sv",
"rtl/MaxPeriodFibonacciLFSR.sv",
"rtl/mem_128x4.sv",
"rtl/mem_256x4.sv",
"rtl/mem_268435456x64.sv",
"rtl/MemAddrCalcUnit.sv",
"rtl/MemoryBus.sv",
"rtl/meta_128x120.sv",
"rtl/meta_40x240.sv",
"rtl/Mul54.sv",
"rtl/MulAddRecFNPipe_1.sv",
"rtl/MulAddRecFNPipe.sv",
"rtl/MulAddRecFNToRaw_postMul_1.sv",
"rtl/MulAddRecFNToRaw_postMul.sv",
"rtl/MulAddRecFNToRaw_preMul_1.sv",
"rtl/MulAddRecFNToRaw_preMul.sv",
"rtl/MulDiv.sv",
"rtl/NBDTLB.sv",
"rtl/NLPrefetcher.sv",
"rtl/NonSyncResetSynchronizerPrimitiveShiftReg_d3.sv",
"rtl/OptimizationBarrier_14.sv",
"rtl/OptimizationBarrier_92.sv",
"rtl/OptimizationBarrier_93.sv",
"rtl/OptimizationBarrier.sv",
"rtl/PeripheryBus_1.sv",
"rtl/PeripheryBus.sv",
"rtl/PipelinedMultiplier.sv",
"rtl/PipelinedMulUnit.sv",
"rtl/plusarg_reader.v",
"rtl/PMPChecker_1.sv",
"rtl/PMPChecker.sv",
"rtl/ProbePicker.sv",
"rtl/PTW.sv",
"rtl/Queue_10.sv",
"rtl/Queue_11.sv",
"rtl/Queue_13.sv",
"rtl/Queue_15.sv",
"rtl/Queue_19.sv",
"rtl/Queue_1.sv",
"rtl/Queue_20.sv",
"rtl/Queue_21.sv",
"rtl/Queue_22.sv",
"rtl/Queue_23.sv",
"rtl/Queue_24.sv",
"rtl/Queue_25.sv",
"rtl/Queue_26.sv",
"rtl/Queue_27.sv",
"rtl/Queue_28.sv",
"rtl/Queue_29.sv",
"rtl/Queue_30.sv",
"rtl/Queue_31.sv",
"rtl/Queue_32.sv",
"rtl/Queue_33.sv",
"rtl/Queue_4.sv",
"rtl/Queue_5.sv",
"rtl/Queue_8.sv",
"rtl/Queue_9.sv",
"rtl/Queue.sv",
"rtl/ram_16x46.sv",
"rtl/ram_2x101.sv",
"rtl/ram_2x103.sv",
"rtl/ram_2x109.sv",
"rtl/ram_2x113.sv",
"rtl/ram_2x117.sv",
"rtl/ram_2x120.sv",
"rtl/ram_2x121.sv",
"rtl/ram_2x127.sv",
"rtl/ram_2x128.sv",
"rtl/ram_2x412.sv",
"rtl/ram_2x56.sv",
"rtl/ram_2x78.sv",
"rtl/ram_2x81.sv",
"rtl/ram_2x82.sv",
"rtl/ram_2x88.sv",
"rtl/ram_3x79.sv",
"rtl/ram_4x65.sv",
"rtl/ram_5x79.sv",
"rtl/ram_7x79.sv",
"rtl/ram_8x72.sv",
"rtl/ram_sink_2x2.sv",
"rtl/RecFNToIN_1.sv",
"rtl/RecFNToIN.sv",
"rtl/RecFNToRecFN_1.sv",
"rtl/RecFNToRecFN.sv",
"mock/regfile_128x64.sv",
"mock/regfile_128x65.sv",
"rtl/RegisterFileSynthesizable_1.sv",
"rtl/RegisterFileSynthesizable.sv",
"rtl/RegisterRead_1.sv",
"rtl/RegisterReadDecode_1.sv",
"rtl/RegisterReadDecode_2.sv",
"rtl/RegisterReadDecode_4.sv",
"rtl/RegisterReadDecode_5.sv",
"rtl/RegisterReadDecode_6.sv",
"rtl/RegisterReadDecode.sv",
"rtl/RegisterRead.sv",
"rtl/RenameBusyTable_1.sv",
"rtl/RenameBusyTable.sv",
"rtl/RenameFreeList_1.sv",
"rtl/RenameFreeList.sv",
"rtl/RenameMapTable_1.sv",
"rtl/RenameMapTable.sv",
"rtl/RenameStage_1.sv",
"rtl/RenameStage.sv",
"rtl/Repeater_10.sv",
"rtl/Repeater_11.sv",
"rtl/Repeater_1.sv",
"rtl/Repeater_2.sv",
"rtl/Repeater_3.sv",
"rtl/Repeater_4.sv",
"rtl/Repeater_5.sv",
"rtl/Repeater_6.sv",
"rtl/Repeater_7.sv",
"rtl/Repeater_8.sv",
"rtl/Repeater.sv",
"rtl/ResetCatchAndSync_d3.sv",
"rtl/ResetSynchronizerShiftReg_w1_d3_i0.sv",
"rtl/Rob.sv",
"rtl/RoundAnyRawFNToRecFN_1.sv",
"rtl/RoundAnyRawFNToRecFN_2.sv",
"rtl/RoundAnyRawFNToRecFN_3.sv",
"rtl/RoundAnyRawFNToRecFN_4.sv",
"rtl/RoundAnyRawFNToRecFN_5.sv",
"rtl/RoundAnyRawFNToRecFN_7.sv",
"rtl/RoundAnyRawFNToRecFN.sv",
"rtl/RoundRawFNToRecFN_1.sv",
"rtl/RoundRawFNToRecFN_2.sv",
"rtl/RoundRawFNToRecFN.sv",
"rtl/RVCExpander.sv",
"rtl/sdq_17x64.sv",
"rtl/SerialRAM.sv",
#"rtl/SimJTAG.v",
#"rtl/SimTSI.v",
"rtl/SynchronizerShiftReg_w1_d3.sv",
"rtl/SystemBus_1.sv",
"rtl/SystemBus.sv",
"rtl/table_128x44.sv",
"rtl/table_128x52.sv",
"rtl/table_256x48.sv",
"rtl/tag_array_64x168.sv",
"mock/tag_array_64x184.sv",
"rtl/TageBranchPredictorBank.sv",
"rtl/TageTable_1.sv",
"rtl/TageTable_2.sv",
"rtl/TageTable_3.sv",
"rtl/TageTable_4.sv",
"rtl/TageTable_5.sv",
"rtl/TageTable.sv",
"rtl/TestHarness.sv",
"rtl/TileClockGater.sv",
"rtl/TilePRCIDomain.sv",
"rtl/TileResetSetter.sv",
"rtl/TLAsyncCrossingSink.sv",
"rtl/TLAsyncCrossingSource.sv",
"rtl/TLAtomicAutomata_1.sv",
"rtl/TLAtomicAutomata.sv",
"rtl/TLBroadcast_1.sv",
"rtl/TLBroadcast.sv",
"rtl/TLBroadcastTracker_1.sv",
"rtl/TLBroadcastTracker_2.sv",
"rtl/TLBroadcastTracker_3.sv",
"rtl/TLBroadcastTracker_4.sv",
"rtl/TLBroadcastTracker_5.sv",
"rtl/TLBroadcastTracker_6.sv",
"rtl/TLBroadcastTracker_7.sv",
"rtl/TLBroadcastTracker.sv",
"rtl/TLB.sv",
"rtl/TLBuffer_12.sv",
"rtl/TLBuffer_14.sv",
"rtl/TLBuffer_15.sv",
"rtl/TLBuffer_16.sv",
"rtl/TLBuffer_1.sv",
"rtl/TLBuffer_2.sv",
"rtl/TLBuffer_3.sv",
"rtl/TLBuffer_4.sv",
"rtl/TLBuffer_5.sv",
"rtl/TLBuffer_7.sv",
"rtl/TLBuffer.sv",
"rtl/TLBusBypassBar.sv",
"rtl/TLBusBypass.sv",
"rtl/TLDebugModuleInnerAsync.sv",
"rtl/TLDebugModuleInner.sv",
"rtl/TLDebugModuleOuterAsync.sv",
"rtl/TLDebugModuleOuter.sv",
"rtl/TLDebugModule.sv",
"rtl/TLError_1.sv",
"rtl/TLError.sv",
"rtl/TLFIFOFixer_1.sv",
"rtl/TLFIFOFixer_2.sv",
"rtl/TLFIFOFixer_3.sv",
"rtl/TLFIFOFixer_4.sv",
"rtl/TLFIFOFixer_5.sv",
"rtl/TLFIFOFixer.sv",
"rtl/TLFragmenter_1.sv",
"rtl/TLFragmenter_2.sv",
"rtl/TLFragmenter_3.sv",
"rtl/TLFragmenter_4.sv",
"rtl/TLFragmenter_5.sv",
"rtl/TLFragmenter_6.sv",
"rtl/TLFragmenter_7.sv",
"rtl/TLFragmenter_8.sv",
"rtl/TLFragmenter.sv",
"rtl/TLInterconnectCoupler_10.sv",
"rtl/TLInterconnectCoupler_11.sv",
"rtl/TLInterconnectCoupler_12.sv",
"rtl/TLInterconnectCoupler_4.sv",
"rtl/TLInterconnectCoupler_5.sv",
"rtl/TLInterconnectCoupler_7.sv",
"rtl/TLInterconnectCoupler_8.sv",
"rtl/TLMonitor_10.sv",
"rtl/TLMonitor_11.sv",
"rtl/TLMonitor_12.sv",
"rtl/TLMonitor_13.sv",
"rtl/TLMonitor_14.sv",
"rtl/TLMonitor_15.sv",
"rtl/TLMonitor_16.sv",
"rtl/TLMonitor_17.sv",
"rtl/TLMonitor_18.sv",
"rtl/TLMonitor_19.sv",
"rtl/TLMonitor_1.sv",
"rtl/TLMonitor_20.sv",
"rtl/TLMonitor_21.sv",
"rtl/TLMonitor_22.sv",
"rtl/TLMonitor_23.sv",
"rtl/TLMonitor_24.sv",
"rtl/TLMonitor_25.sv",
"rtl/TLMonitor_26.sv",
"rtl/TLMonitor_27.sv",
"rtl/TLMonitor_28.sv",
"rtl/TLMonitor_29.sv",
"rtl/TLMonitor_2.sv",
"rtl/TLMonitor_30.sv",
"rtl/TLMonitor_31.sv",
"rtl/TLMonitor_32.sv",
"rtl/TLMonitor_33.sv",
"rtl/TLMonitor_34.sv",
"rtl/TLMonitor_35.sv",
"rtl/TLMonitor_36.sv",
"rtl/TLMonitor_37.sv",
"rtl/TLMonitor_38.sv",
"rtl/TLMonitor_39.sv",
"rtl/TLMonitor_3.sv",
"rtl/TLMonitor_40.sv",
"rtl/TLMonitor_41.sv",
"rtl/TLMonitor_42.sv",
"rtl/TLMonitor_43.sv",
"rtl/TLMonitor_44.sv",
"rtl/TLMonitor_45.sv",
"rtl/TLMonitor_46.sv",
"rtl/TLMonitor_47.sv",
"rtl/TLMonitor_48.sv",
"rtl/TLMonitor_49.sv",
"rtl/TLMonitor_4.sv",
"rtl/TLMonitor_50.sv",
"rtl/TLMonitor_51.sv",
"rtl/TLMonitor_52.sv",
"rtl/TLMonitor_53.sv",
"rtl/TLMonitor_54.sv",
"rtl/TLMonitor_55.sv",
"rtl/TLMonitor_56.sv",
"rtl/TLMonitor_57.sv",
"rtl/TLMonitor_58.sv",
"rtl/TLMonitor_59.sv",
"rtl/TLMonitor_5.sv",
"rtl/TLMonitor_6.sv",
"rtl/TLMonitor_7.sv",
"rtl/TLMonitor_8.sv",
"rtl/TLMonitor_9.sv",
"rtl/TLMonitor.sv",
"rtl/TLPLIC.sv",
"rtl/TLRAM_1.sv",
"rtl/TLRAM.sv",
"rtl/TLROM.sv",
"rtl/TLSerdesser_1.sv",
"rtl/TLSerdesser.sv",
"rtl/TLWidthWidget_10.sv",
"rtl/TLWidthWidget_9.sv",
"rtl/TLXbar_10.sv",
"rtl/TLXbar_11.sv",
"rtl/TLXbar_12.sv",
"rtl/TLXbar_5.sv",
"rtl/TLXbar_8.sv",
"rtl/TLXbar.sv",
"rtl/TSIToTileLink.sv",
"rtl/UOPCodeFDivDecoder.sv",
"rtl/UOPCodeFPUDecoder.sv",
]

execunits = ['ALUExeUnit_2', 'ALUExeUnit_3', 'ALUExeUnit_4', 'ALUExeUnit_5', 'ALUExeUnit']

exeunitsrc =  [ "rtl/ALU.sv",
        "rtl/AMOALU.sv",
        "rtl/PipelinedMulUnit.sv",
        "rtl/ALUUnit_1.sv",
        "rtl/ALUUnit_2.sv",
        "rtl/ALUUnit.sv",
        "rtl/DivUnit.sv",
        "rtl/MemAddrCalcUnit.sv",
        "rtl/BranchKillableQueue_8.sv",
        "rtl/BranchKillableQueue_9.sv",
        "rtl/BranchKillableQueue_10.sv",
        "rtl/BranchKillableQueue_11.sv",
        "rtl/BranchKillableQueue.sv",
        "rtl/IntToFPUnit.sv",
        "rtl/MulDiv.sv",
        "rtl/PipelinedMultiplier.sv",
        "rtl/IntToFP.sv",
        "rtl/UOPCodeFPUDecoder.sv",
        "rtl/ram_5x1.sv",
        "rtl/INToRecFN_1.sv",
        "rtl/INToRecFN.sv",
        "rtl/RoundAnyRawFNToRecFN.sv",
        "rtl/RoundAnyRawFNToRecFN_1.sv"]

[build_openroad(
        name = exe,
        verilog_files=["rtl/" + exe + ".sv"] + exeunitsrc,
		sdc_constraints = ":constraints.sdc",
        stage_args={
                'floorplan': ['CORE_UTILIZATION=5',
                'CORE_ASPECT_RATIO=8',
                "RTLMP_FLOW=True"],
                'place': ['PLACE_DENSITY=0.2000'],
                'route': ['BLAH=6']
                }
        )
 for exe in execunits]

 #'RegisterFileSynthesizable',

fpfiles = ["rtl/FpPipeline.sv",
        "rtl/ram_7x79.sv",
        "rtl/ram_3x79.sv",
        "rtl/Arbiter_16.sv",
        "rtl/RegisterRead.sv",
        "rtl/RegisterFileSynthesizable.sv",
        "rtl/IssueUnitCollapsing.sv",
        "rtl/FPUExeUnit_1.sv",
        "rtl/FPUExeUnit.sv",
        "rtl/BranchKillableQueue_10.sv",
        "rtl/BranchKillableQueue_11.sv",
        "rtl/FDivSqrtUnit.sv",
        "rtl/FPUUnit.sv",
        "rtl/IssueSlot.sv",
        "mock/regfile_128x65.sv",
        "rtl/RegisterReadDecode_1.sv",
        "rtl/RegisterReadDecode.sv",
        "rtl/FPU.sv",
        "rtl/RecFNToRecFN.sv",
        "rtl/RecFNToRecFN_1.sv",
        "rtl/DivSqrtRecF64.sv",
        "rtl/UOPCodeFDivDecoder.sv",
        "rtl/RoundAnyRawFNToRecFN_5.sv",
        "rtl/Mul54.sv",
        "rtl/DivSqrtRecF64_mulAddZ31.sv",
        "rtl/RoundAnyRawFNToRecFN_4.sv",
        "rtl/FPToFP.sv",
        "rtl/FPToInt.sv",
        "rtl/FMADecoder.sv",
        "rtl/FPUFMAPipe_1.sv",
        "rtl/FPUFMAPipe.sv",
        "rtl/UOPCodeFPUDecoder.sv",
        "rtl/MulAddRecFNPipe.sv",
        "rtl/MulAddRecFNPipe_1.sv",
        "rtl/RecFNToIN_1.sv",
        "rtl/RecFNToIN.sv",
        "rtl/CompareRecFN.sv",
        "rtl/RoundRawFNToRecFN_2.sv",
        "rtl/DivSqrtRecF64ToRaw_mulAddZ31.sv",
        "rtl/RoundAnyRawFNToRecFN_7.sv",
        "rtl/RoundRawFNToRecFN_1.sv",
        "rtl/MulAddRecFNToRaw_postMul_1.sv",
        "rtl/MulAddRecFNToRaw_preMul_1.sv",
        "rtl/RoundRawFNToRecFN.sv",
        "rtl/MulAddRecFNToRaw_postMul.sv",
        "rtl/MulAddRecFNToRaw_preMul.sv",
        "rtl/RoundAnyRawFNToRecFN_2.sv",
        "rtl/RoundAnyRawFNToRecFN_3.sv"]

build_openroad(
        name = "FpPipeline",
        verilog_files=fpfiles,
        macros=["regfile_128x65"],
        io_constraints=":io-top",
		sdc_constraints=":constraints.sdc",
        stage_args={
                'synth': ['SYNTH_HIERARCHICAL=1'],
                'floorplan': [
                        'CORE_UTILIZATION=30',
                        'CORE_MARGIN=4',
                        #"DIE_AREA=0 0 350 350", "CORE_AREA=4 4 346 346",
                        #'MACRO_PLACE_HALO=20 20',
                        'RTLMP_FLOW=True'
                        ],
                'place': ['PLACE_DENSITY=0.42',
                'PLACE_PINS_ARGS=-annealing'],
                'grt': ['SKIP_INCREMENTAL_REPAIR=1']
                },
        abstract_stage='cts',
        mock_area=0.6
        )




registerreadsrc = ["rtl/RegisterRead_1.sv",
        "rtl/RegisterReadDecode_6.sv",
        "rtl/RegisterReadDecode_5.sv",
        "rtl/RegisterReadDecode_2.sv",
        "rtl/RegisterReadDecode_4.sv"
        ]

build_openroad(
        name = "RegisterRead_1",
        verilog_files=registerreadsrc,
        sdc_constraints = ":constraints.sdc",
        stage_args={'floorplan':['CORE_UTILIZATION=5',
        'CORE_ASPECT_RATIO=4'],
        'place': ['PLACE_DENSITY=0.20']}
        )

issueslotfiles = ["rtl/IssueUnitCollapsing_1.sv", "rtl/IssueUnitCollapsing_2.sv",
        "rtl/IssueSlot_32.sv"]

[build_openroad(
        name = exe,
        verilog_files=issueslotfiles,
        sdc_constraints = ":constraints.sdc",
        stage_args={'floorplan':['CORE_UTILIZATION=10'],
        'place': ['PLACE_DENSITY=0.20']}
        )
 for exe in ['IssueUnitCollapsing_1', 'IssueUnitCollapsing_2']]


build_openroad(
        name = "Rob",
        verilog_files=["rtl/Rob.sv"],
        sdc_constraints = ":constraints.sdc",
        stage_args={'floorplan':['CORE_UTILIZATION=3'],
        'place': ['PLACE_DENSITY=0.05']}
        )

build_openroad(
        name = "DecodeUnit",
        verilog_files=["rtl/DecodeUnit.sv"],
        sdc_constraints = ":constraints.sdc",
        stage_args={'floorplan':['CORE_UTILIZATION=20',
        'CORE_ASPECT_RATIO=4'],
        'place': ['PLACE_DENSITY=0.40']}
        )

build_openroad(
        name = "BoomCore",
        verilog_files=["rtl/BoomCore.sv",
        "rtl/Arbiter_18.sv",
        "rtl/CSRFile.sv",
        "rtl/Arbiter_19.sv",
        "rtl/BasicDispatcher.sv",
        "rtl/BranchMaskGenerationLogic.sv",
        "rtl/DecodeUnit.sv",
        "rtl/ALUExeUnit.sv",
        "rtl/ALUExeUnit_2.sv",
        "rtl/ALUExeUnit_3.sv",
        "rtl/ALUExeUnit_4.sv",
        "rtl/ALUExeUnit_5.sv"
        ] + exeunitsrc + registerreadsrc,
        macros=["FpPipeline",
        "IssueUnitCollapsing_1",
        "IssueUnitCollapsing_2",
        "Rob",
        "RenameStage",
        "RenameStage_1",
        "RegisterRead_1",
        "RegisterFileSynthesizable_1"] +
        execunits,
        sdc_constraints = ":constraints-top.sdc",
        stage_args={
                'floorplan': ['CORE_UTILIZATION=10','MACRO_PLACE_HALO=50 50'],
                'place': ['PLACE_DENSITY=0.20']}
        )

boom_tile_small_srams = [
        "tag_array_64x184",
        "tag_array_64x168",
        # "data_2048x2",
        "table_256x48",
        "table_128x52",
        "table_128x44",
        "btb_128x56",
        "meta_128x120",
        "lb_32x128",
        "sdq_17x64",
        "data_2048x8",
        "mem_256x4"]

boom_tile_rams = [
        # "l2_tlb_ram_0_512x46",
        "ebtb_128x40",
        "array_256x128",
        "dataArrayB_256x64"
        #, "l2_tlb_ram_0_512x45"
        ]

digital_top_srams=[
        # "cc_dir_1024x168",
        # "data_data_40x128",
        # "ghist_40x64",
        "meta_40x240"]


[build_openroad(
        name = ram,
        io_constraints=":io-sram",
        verilog_files=[{'array_256x128':'mock',
        'cc_dir_1024x168':'mock',
        'data_2048x2':'mock',
        'dataArrayB_256x64':'mock',
        'data_data_40x128':'mock',
        'ebtb_128x40':'mock',
        'ghist_40x64':'mock',
        'l2_tlb_ram_0_512x45':'mock',
        'tag_array_64x184':'mock',
        'data_2048x8':'mock'}.get(ram, "rtl") + "/" + ram + ".sv"],
        sdc_constraints = ":constraints-sram",
        stage_args={
                'synth': ['SYNTH_MEMORY_MAX_BITS=16384'],
                'floorplan': ['CORE_UTILIZATION=40',
                        'CORE_ASPECT_RATIO=2'],
                'place': ['PLACE_DENSITY=0.65'],
                'cts': ['SKIP_CTS_REPAIR_TIMING=1',
                'SKIP_REPORT_METRICS=1']
        },
        abstract_stage='cts',
        mock_area={
        'meta_40x240':0.3,
        'data_data_40x128':1,
        'ram_256x8':0.2,
        'meta_128x120':0.25,
        'lb_32x128':1,
        'l2_tlb_ram_0_512x45':0.3}.get(ram, 0.5)
        )
 for ram in boom_tile_rams + boom_tile_small_srams + digital_top_srams]

big_rams = ['mem_8192x64', 'cc_banks_16384x64', 'TLROM', 'ghist_40x72']

[build_openroad(
        name = ram,
        io_constraints=":io-sram",
        sdc_constraints = ":constraints-sram",
        verilog_files=["mock/" + ram + ".sv"],
        stage_args={
                'floorplan': {'ghist_40x72':['CORE_UTILIZATION=4']}.get(ram, ['CORE_UTILIZATION=40']) + [
                        'CORE_ASPECT_RATIO=2'],
                'place': ['PLACE_DENSITY=0.65']},
        abstract_stage='cts',
        mock_area={'ghist_40x72':1}.get(ram, 0.30)
        ) for ram in big_rams if ram != 'TLROM']

build_openroad(
        name = "TLROM",
        io_constraints=":io",
        verilog_files=["rtl/TLROM.sv",
        "rtl/TLMonitor_43.sv",
        "rtl/plusarg_reader.v"],
        sdc_constraints = ":constraints.sdc",
        stage_args={
                'floorplan': ['CORE_UTILIZATION=40',
                        'CORE_ASPECT_RATIO=2'],
                'place': ['PLACE_DENSITY=0.65']},
        abstract_stage='cts',
        mock_area=0.40
        )

boom_regfile_rams = [
        "regfile_128x64",
        "regfile_128x65"]

[build_openroad(
        name = ram,
        io_constraints=":io-sram",
        verilog_files=["mock/" + ram + ".sv"],
        sdc_constraints = ":constraints-sram",
        stage_args={
                'floorplan': ([] +
                        #'CORE_UTILIZATION=200',
                        #"'CORE_ASPECT_RATIO=4'"
                        (["DIE_AREA=0 0 400 400",
                        "CORE_AREA=2 2 298 298"] if ram in ("regfile_128x65","regfile_128x64") else
                        ["DIE_AREA=0 0 10 10",
                        "CORE_AREA=2 2 8 8"])),
                'place': ['PLACE_DENSITY=' +
                {'regfile_128x64':'0.42', 'regfile_128x65':'0.3'}.get(ram, '0.10')],
        },
        abstract_stage='cts',
        mock_area={'regfile_128x64':0.4, 'regfile_128x65':0.4}.get(ram, 0.8)
        )
 for ram in boom_regfile_rams]

build_openroad(
        name = "L1MetadataArray",
        verilog_files=["rtl/L1MetadataArray.sv"],
        variant="test",
        macros=["tag_array_64x184"],
        io_constraints=":io",
		sdc_constraints=":constraints-top.sdc",
        stage_args={
                'synth': ['SYNTH_HIERARCHICAL=1'],
                'floorplan': [
                        'CORE_UTILIZATION=3',
                        'RTLMP_FLOW=True',
                        'CORE_MARGIN=2',
                        ],
                'place': ['PLACE_DENSITY=0.20', 'PLACE_PINS_ARGS=-annealing'],
                },
        abstract_stage='place'
        )

build_openroad(
        name = "BoomTile",
        verilog_files=all_source_files,
        macros=boom_tile_rams + boom_regfile_rams + boom_tile_small_srams + digital_top_srams,
        sdc_constraints = ":constraints-boomtile.sdc",
        io_constraints=":io-boomtile",
        stage_args=add_options_all_stages({
                'synth': ['SYNTH_HIERARCHICAL=1'],
                'floorplan': [
                        'CORE_UTILIZATION=20',
                        'MACRO_PLACE_HALO=20 20',
                        'RTLMP_FLOW=True'
                        ],
                'cts': ['TNS_END_PERCENT=0',
                'SKIP_CTS_REPAIR_TIMING=1'],
                'place': ['PLACE_DENSITY=0.27',
                'PLACE_PINS_ARGS=-annealing',
                'GPL_ROUTABILITY_DRIVEN=0'],
                'grt': ['SKIP_INCREMENTAL_REPAIR=1',
                'SKIP_ANTENNA_REPAIR=1'],
                'route': []
                }, ['SKIP_REPORT_METRICS=1'])
        )
