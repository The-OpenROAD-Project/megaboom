load("@bazel-orfs//:openroad.bzl", "orfs_flow", "orfs_run")
load(":write_binary.bzl", "write_binary")

filegroup(
    name = "io-sram",
    srcs = [
        "io-sram.tcl",
    ],
    data = [
        "util.tcl",
    ],
    visibility = [":__subpackages__"],
)

filegroup(
    name = "io-sram-bottom",
    srcs = [
        "io-sram-bottom.tcl",
    ],
    data = [
        "util.tcl",
    ],
    visibility = [":__subpackages__"],
)

filegroup(
    name = "io-boomtile",
    srcs = [
        "io-boomtile.tcl",
    ],
    data = [
        "util.tcl",
    ],
)

filegroup(
    name = "io",
    srcs = [
        "io.tcl",
    ],
    data = [
        "util.tcl",
    ],
)

filegroup(
    name = "io-top",
    srcs = [
        "io-top.tcl",
    ],
    data = [
        "util.tcl",
    ],
)

filegroup(
    name = "constraints-sram",
    srcs = [
        "constraints.sdc",
    ],
    visibility = [":__subpackages__"],
)

filegroup(
    name = "constraints-boomtile",
    srcs = [
        "constraints-boomtile.sdc",
    ],
    visibility = [":__subpackages__"],
)

filegroup(
    name = "boomtile-macro-placement",
    srcs = [
        "macros.tcl",
    ],
    visibility = [":__subpackages__"],
)

BLOCK_FLOORPLAN = {
    "PDN_TCL": "$(PLATFORM_DIR)/openRoad/pdn/BLOCK_grid_strategy.tcl",
    # repair_timing runs for hours in floorplan
    "REMOVE_ABC_BUFFERS": "1",
}

SRAM_SYNTH_ARGUMENTS = {"SDC_FILE": "$(location :constraints-sram)"}

SRAM_FLOOR_PLACE_ARGUMENTS = {"IO_CONSTRAINTS": "$(location :io-sram)"}

SKIP_REPORT_METRICS = {"SKIP_REPORT_METRICS": "1"}

mock_files = [
    "mock/array_256x128.sv",
    "mock/data_2048x8.sv",
    "mock/dataArrayB_256x64.sv",
    "mock/ebtb_128x40.sv",
    "mock/l2_tlb_ram_0_512x46.sv",
    "mock/regfile_128x64.sv",
    "mock/regfile_128x65.sv",
    "mock/tag_array_64x184.sv",
]

all_source_files = sorted(glob(
    include = [
        "rtl/*.sv",
        "rtl/*.v",
    ],
    exclude = ([f.replace("mock/", "rtl/") for f in mock_files] + [
        "rtl/ClockSourceAtFreqMHz.v",
        "rtl/SimJTAG.v",
        "rtl/SimTSI.v",
    ]),
) + mock_files)

# Haven't tried mocking any SRAMs with mock_area of None. Rest have been tried
# with experiment notes on the same line
boom_tile_small_srams = {
    "tag_array_64x184": {
        "mock_area": 0.62,
        "aspect_ratio": "0.33",
    },
    "tag_array_64x168": {
        "mock_area": 0.31,
        "aspect_ratio": "0.36",
    },
    # "data_2048x2": { "mock_area": None, "aspect_ratio": "2" },
    "table_256x48": {
        "mock_area": 0.31,
        "aspect_ratio": "1.25",
    },  #close
    "table_128x52": {
        "mock_area": 0.31,
        "aspect_ratio": "0.58",
    },  #close
    "table_128x44": {
        "mock_area": 0.31,
        "aspect_ratio": "0.68",
    },  # close
    "btb_128x56": {
        "mock_area": 0.309,
        "aspect_ratio": "0.53",
    },  # close
    "meta_128x120": {
        "mock_area": 0.31,
        "aspect_ratio": "0.25",
    },
    "lb_32x128": {
        "mock_area": 0.32,
        "aspect_ratio": "0.93",
    },
    "sdq_17x64": {
        "mock_area": 0.32,
        "aspect_ratio": "1.2",
    },
    "data_2048x8": {
        "mock_area": 3.2,
        "aspect_ratio": "58",
        "core_utilization": "10",
    },
    "mem_256x4": {
        "mock_area": 0.265,
        "aspect_ratio": "36",
    },  # close
}

boom_tile_rams = {
    # "l2_tlb_ram_0_512x46": { "mock_area": None, "aspect_ratio": "2" },
    "ebtb_128x40": {
        "mock_area": 0.86,
        "aspect_ratio": "0.75",
    },  # close
    "array_256x128": {
        "mock_area": 1.225,
        "aspect_ratio": "0.47",
    },  # close
    "dataArrayB_256x64": {
        "mock_area": 1.23,
        "aspect_ratio": "0.94",
    },  # close
    # "l2_tlb_ram_0_512x45": { "mock_area": None, "aspect_ratio": "2" },
}

digital_top_srams = {
    # "cc_dir_1024x168": { "mock_area": None, "aspect_ratio": "2" },
    # "data_data_40x128": { "mock_area": None, "aspect_ratio": "2" },
    # "ghist_40x64": { "mock_area": None, "aspect_ratio": "2" },
    "meta_40x240": {
        "mock_area": 0.48,
        "aspect_ratio": "0.64",
    },  # ran out of left edge pin slots - can get closer by adjusting aspect ratio but only to within 1000 um^2
}

# combine SRAMs into one dictionary for processing
all_srams = boom_tile_rams | boom_tile_small_srams | digital_top_srams

write_binary(
    name = "srams",
    data = str(all_srams),
)

[
    orfs_flow(
        name = ram,
        abstract_stage = "cts",
        arguments = {
            "PLACE_PINS_ARGS": "-min_distance 1 -min_distance_in_tracks",
        },
        mock_area = ram_data["mock_area"],
        stage_arguments = {
            "synth": SRAM_SYNTH_ARGUMENTS | {"SYNTH_MEMORY_MAX_BITS": "16384"},
            "floorplan": BLOCK_FLOORPLAN | SRAM_FLOOR_PLACE_ARGUMENTS | {
                "CORE_UTILIZATION": ram_data.get("core_utilization", "40"),
                "CORE_ASPECT_RATIO": ram_data["aspect_ratio"],
            },
            "place": SRAM_FLOOR_PLACE_ARGUMENTS | {
                "PLACE_DENSITY": "0.65",
                "GPL_TIMING_DRIVEN": "0",
            },
            "cts": SKIP_REPORT_METRICS | {"SKIP_CTS_REPAIR_TIMING": "0"},
        },
        stage_sources = {
            "synth": [":constraints-sram"],
            "floorplan": [":io-sram"],
            "place": [":io-sram"],
        },
        verilog_files = [
            {
                "array_256x128": "mock/",
                "cc_dir_1024x168": "mock/",
                "data_2048x2": "mock/",
                "dataArrayB_256x64": "mock/",
                "data_data_40x128": "mock/",
                "ebtb_128x40": "mock/",
                "ghist_40x64": "mock/",
                "l2_tlb_ram_0_512x45": "mock/",
                "tag_array_64x184": "mock/",
                "data_2048x8": "mock/",
            }.get(ram, "rtl/") + ram + ".sv",
        ],
    )
    for ram, ram_data in all_srams.items()
]

all_srams_stage_num = "4"

all_srams_stage = "cts"

[orfs_run(
    name = ram + "_timing_report",
    src = ":" + ram + "_" + all_srams_stage,
    outs = [
        ram + ".yaml",
    ],
    arguments = {
        "OUTFILE": "$(location :" + ram + ".yaml)",
        "STAGE": all_srams_stage_num + "_" + all_srams_stage,
    },
    script = ":report-sram.tcl",
) for ram in all_srams.keys()]

[orfs_run(
    name = ram + "_floorplan_report",
    src = ":" + ram + "_mocked_floorplan",
    outs = [
        ram + "_floorplan.yaml",
    ],
    arguments = {"OUTFILE": "$(location :" + ram + "_floorplan.yaml)"},
    script = ":report-floorplan.tcl",
) for ram in all_srams.keys()]

genrule(
    name = "sram_report",
    srcs = ["sram.py"] + [
               ":srams",
           ] + [":" + ram + "_timing_report" for ram in all_srams.keys()] +
           [":" + ram + "_floorplan_report" for ram in all_srams.keys()],
    outs = ["sram-report.md"],
    cmd = (
        "$(location :sram.py) $(location :srams) " +
        " ".join(["$(location :" + ram + "_timing_report)" for ram in all_srams.keys()] +
                 ["$(location :" + ram + "_floorplan_report)" for ram in all_srams.keys()]) +
        " > $@"
    ),
    visibility = ["//visibility:public"],
)

boom_regfile_rams = {
    "regfile_128x64": ":io-sram-bottom",
    "regfile_128x65": ":io-sram",
}

[
    orfs_flow(
        name = ram,
        abstract_stage = all_srams_stage,
        stage_arguments = {
            "synth": SRAM_SYNTH_ARGUMENTS,
            "floorplan": BLOCK_FLOORPLAN | {
                # "CORE_UTILIZATION": "200",
                # "CORE_ASPECT_RATIO": "4",
                "DIE_AREA": "0 0 400 400",
                "CORE_AREA": "2 2 298 298",
                "IO_CONSTRAINTS": "$(location {})".format(io_constraint),
            },
            "place": {
                "PLACE_DENSITY": {
                    "regfile_128x64": "0.42",
                    "regfile_128x65": "0.3",
                }.get(ram),
                "IO_CONSTRAINTS": "$(location {})".format(io_constraint),
            },
        },
        stage_sources = {
            "synth": [":constraints-sram"],
            "floorplan": [io_constraint],
            "place": [io_constraint],
        },
        verilog_files = ["mock/" + ram + ".sv"],
    )
    for ram, io_constraint in boom_regfile_rams.items()
]

boom_tile_macros = [x + "_generate_abstract" for x in all_srams.keys()]

orfs_flow(
    name = "BoomTile",
    arguments = SKIP_REPORT_METRICS | {
        "PDN_TCL": "$(PLATFORM_DIR)/openRoad/pdn/BLOCKS_grid_strategy.tcl",
        # repair_timing runs for hours in floorplan
        "REMOVE_ABC_BUFFERS": "1",
        "IO_CONSTRAINTS": "$(location :io-boomtile)",
        "PLACE_DENSITY": "0.20",
        # We only need hierarchical synthesis when we are running through floorplan
        # write_macro_placement macros.tcl
        "SYNTH_HIERARCHICAL": "1",
        "SDC_FILE": "$(location :constraints-boomtile)",
        #"CORE_UTILIZATION": "20",
        # Tweak below to work around initial condition sensitive bugs in
        # macro placement
        "MACRO_PLACE_HALO": "10 10",
        "RTLMP_FLOW": "1",
        # "MACRO_PLACEMENT_TCL": "$(location :boomtile-macro-placement)",
        "TNS_END_PERCENT": "0",
        "SKIP_CTS_REPAIR_TIMING": "1",
        "PLACE_PINS_ARGS": "-annealing",
        "GPL_ROUTABILITY_DRIVEN": "1",
        "GPL_TIMING_DRIVEN": "0",
        # Save global route time for now
        "SKIP_INCREMENTAL_REPAIR": "1",
        "MIN_ROUTING_LAYER": "M2",
        "MAX_ROUTING_LAYER": "M7",
        "ROUTING_LAYER_ADJUSTMENT": "0.45",
        "DIE_AREA": "0 0 1500 1500",
        "CORE_AREA": "2 2 1498 1498",
        "FILL_CELLS": "",
        "TAPCELL_TCL": "",
    },
    macros = boom_tile_macros,
    stage_sources = {
        "synth": [":constraints-boomtile"],
        "floorplan": [
            ":io-boomtile",
            ":boomtile-macro-placement",
        ],
        "place": [":io-boomtile"],
    },
    verilog_files = all_source_files,
)
