load("@bazel-orfs//:openroad.bzl", "build_openroad", "add_options_all_stages", "create_out_rule")
create_out_rule()

orfs_version = "openroad/orfs:41e7d95599c733b8c6a4bfba39440daed8cb5923"

filegroup(
    name = "util",
    srcs = [
        "util.tcl",
    ],
)

filegroup(
    name = "io-sram",
    srcs = [
        "io-sram.tcl",
        ":util",
    ],
    visibility = [":__subpackages__"],
)

filegroup(
    name = "io-sram-bottom",
    srcs = [
        "io-sram-bottom.tcl",
        ":util",
    ],
    visibility = [":__subpackages__"],
)

filegroup(
    name = "io-boomtile",
    srcs = [
        "io-boomtile.tcl",
        ":util",
    ],
)

filegroup(
    name = "io",
    srcs = [
        "io.tcl",
        ":util",
    ],
)

filegroup(
    name = "io-top",
    srcs = [
        "io-top.tcl",
        ":util",
    ],
)

filegroup(
    name = "constraints-sram",
    srcs = [
        "constraints.sdc",
    ],
    visibility = [":__subpackages__"],
)

mock_files = [
        "mock/array_256x128.sv",
        "mock/data_2048x8.sv",
        "mock/dataArrayB_256x64.sv",
        "mock/ebtb_128x40.sv",
        "mock/l2_tlb_ram_0_512x46.sv",
        "mock/regfile_128x64.sv",
        "mock/regfile_128x65.sv",
        "mock/tag_array_64x184.sv",
]

all_source_files = sorted(glob(
    include = ["rtl/*.sv"],
    exclude = [f.replace("mock/", "rtl/") for f in mock_files]
) + mock_files)

boom_tile_small_srams = [
        "tag_array_64x184",
        "tag_array_64x168",
        # "data_2048x2",
        "table_256x48",
        "table_128x52",
        "table_128x44",
        "btb_128x56",
        "meta_128x120",
        "lb_32x128",
        "sdq_17x64",
        "data_2048x8",
        "mem_256x4"]

boom_tile_rams = [
        # "l2_tlb_ram_0_512x46",
        "ebtb_128x40",
        "array_256x128",
        "dataArrayB_256x64"
        #, "l2_tlb_ram_0_512x45"
        ]

digital_top_srams=[
        # "cc_dir_1024x168",
        # "data_data_40x128",
        # "ghist_40x64",
        "meta_40x240"]


[build_openroad(
        docker_image = orfs_version,
        name = ram,
        io_constraints=":io-sram",
        verilog_files=[{'array_256x128':'mock',
        'cc_dir_1024x168':'mock',
        'data_2048x2':'mock',
        'dataArrayB_256x64':'mock',
        'data_data_40x128':'mock',
        'ebtb_128x40':'mock',
        'ghist_40x64':'mock',
        'l2_tlb_ram_0_512x45':'mock',
        'tag_array_64x184':'mock',
        'data_2048x8':'mock'}.get(ram, "rtl") + "/" + ram + ".sv"],
        sdc_constraints = ":constraints-sram",
        stage_args={
                'synth': ['SYNTH_MEMORY_MAX_BITS=16384'],
                'floorplan': ['CORE_UTILIZATION=40',
                        'CORE_ASPECT_RATIO=2'],
                'place': ['PLACE_DENSITY=0.65'],
                'cts': ['SKIP_CTS_REPAIR_TIMING=1',
                'SKIP_REPORT_METRICS=1']
        },
        abstract_stage='cts',
        mock_area={
        'meta_40x240':0.3,
        'data_data_40x128':1,
        'ram_256x8':0.2,
        'meta_128x120':0.25,
        'lb_32x128':1,
        'l2_tlb_ram_0_512x45':0.3}.get(ram, 0.5)
        )
 for ram in boom_tile_rams + boom_tile_small_srams + digital_top_srams]

boom_regfile_rams = [
        "regfile_128x64",
        "regfile_128x65"]

[build_openroad(
        docker_image = orfs_version,
        name = ram,
        io_constraints={'regfile_128x64':":io-sram-bottom", }.get(ram, ":io-sram"),
        verilog_files=["mock/" + ram + ".sv"],
        sdc_constraints = ":constraints-sram",
        stage_args={
                'floorplan': ([] +
                        #'CORE_UTILIZATION=200',
                        #"'CORE_ASPECT_RATIO=4'"
                        (["DIE_AREA=0 0 400 400",
                        "CORE_AREA=2 2 298 298"] if ram in ("regfile_128x65","regfile_128x64") else
                        ["DIE_AREA=0 0 10 10",
                        "CORE_AREA=2 2 8 8"])),
                'place': ['PLACE_DENSITY=' +
                {'regfile_128x64':'0.42', 'regfile_128x65':'0.3'}.get(ram, '0.10')],
        },
        abstract_stage='cts',
        mock_area={'regfile_128x64':0.4, 'regfile_128x65':0.4}.get(ram, 0.8)
        )
 for ram in boom_regfile_rams]

build_openroad(
        docker_image = orfs_version,
        name = "L1MetadataArray",
        verilog_files=["rtl/L1MetadataArray.sv"],
        variant="test",
        macros=["tag_array_64x184"],
        io_constraints=":io",
		sdc_constraints=":constraints.sdc",
        stage_args={
                'synth': ['SYNTH_HIERARCHICAL=1'],
                'floorplan': [
                        'CORE_UTILIZATION=3',
                        'RTLMP_FLOW=True',
                        'CORE_MARGIN=2',
                        ],
                'place': ['PLACE_DENSITY=0.20', 'PLACE_PINS_ARGS=-annealing'],
                },
        abstract_stage='place'
        )

build_openroad(
        docker_image = orfs_version,
        name = "BoomTile",
        verilog_files=all_source_files,
        macros=boom_tile_rams + boom_regfile_rams + boom_tile_small_srams + digital_top_srams,
        sdc_constraints = ":constraints-boomtile.sdc",
        io_constraints=":io-boomtile",
        stage_args=add_options_all_stages({
                'synth': ['SYNTH_HIERARCHICAL=1'],
                'floorplan': [
                        'CORE_UTILIZATION=20',
                        'MACRO_PLACE_HALO=20 20',
                        'RTLMP_FLOW=True'
                        ],
                'cts': ['TNS_END_PERCENT=0',
                'SKIP_CTS_REPAIR_TIMING=1'],
                'place': ['PLACE_DENSITY=0.20',
                'PLACE_PINS_ARGS=-annealing',
                'GPL_ROUTABILITY_DRIVEN=0'],
                'grt': ['SKIP_INCREMENTAL_REPAIR=1',
                'SKIP_ANTENNA_REPAIR=1'],
                'route': []
                }, ['SKIP_REPORT_METRICS=1'])
        )
