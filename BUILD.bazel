load("@bazel-orfs//:openroad.bzl", "orfs_flow", "orfs_run")
load(":write_binary.bzl", "write_binary")

filegroup(
    name = "io-sram",
    srcs = [
        "io-sram.tcl",
    ],
    data = [
        "util.tcl",
    ],
    visibility = [":__subpackages__"],
)

filegroup(
    name = "io-sram-bottom",
    srcs = [
        "io-sram-bottom.tcl",
    ],
    data = [
        "util.tcl",
    ],
    visibility = [":__subpackages__"],
)

filegroup(
    name = "io-boomtile",
    srcs = [
        "io-boomtile.tcl",
    ],
    data = [
        "util.tcl",
    ],
)

filegroup(
    name = "io",
    srcs = [
        "io.tcl",
    ],
    data = [
        "util.tcl",
    ],
)

filegroup(
    name = "io-top",
    srcs = [
        "io-top.tcl",
    ],
    data = [
        "util.tcl",
    ],
)

filegroup(
    name = "constraints-sram",
    srcs = [
        "constraints.sdc",
    ],
    visibility = [":__subpackages__"],
)

filegroup(
    name = "constraints-boomtile",
    srcs = [
        "constraints-boomtile.sdc",
    ],
    visibility = [":__subpackages__"],
)

BLOCK_FLOORPLAN = {
    "PDN_TCL": "$(PLATFORM_DIR)/openRoad/pdn/BLOCK_grid_strategy.tcl",
}

SRAM_SYNTH_ARGUMENTS = {"SDC_FILE": "$(location :constraints-sram)"}

SRAM_FLOOR_PLACE_ARGUMENTS = {"IO_CONSTRAINTS": "$(location :io-sram)"}

SKIP_REPORT_METRICS = {"SKIP_REPORT_METRICS": "1"}

mock_files = [
    "mock/array_256x128.sv",
    "mock/data_2048x8.sv",
    "mock/dataArrayB_256x64.sv",
    "mock/ebtb_128x40.sv",
    "mock/l2_tlb_ram_0_512x46.sv",
    "mock/regfile_128x64.sv",
    "mock/regfile_128x65.sv",
    "mock/tag_array_64x184.sv",
]

all_source_files = sorted(glob(
    include = [
        "rtl/*.sv",
        "rtl/*.v",
    ],
    exclude = ([f.replace("mock/", "rtl/") for f in mock_files] + [
        "rtl/ClockSourceAtFreqMHz.v",
        "rtl/SimJTAG.v",
        "rtl/SimTSI.v",
    ]),
) + mock_files)

# Haven't tried mocking any SRAMs with mock_area of None. Rest have been tried
# with experiment notes on the same line
boom_tile_small_srams = {
    "tag_array_64x184": {
        "mock_area": 0.62,
        "aspect_ratio": "0.33",
    },
    "tag_array_64x168": {
        "mock_area": 0.31,
        "aspect_ratio": "0.36",
    },
    # "data_2048x2": { "mock_area": None, "aspect_ratio": "2" },
    "table_256x48": {
        "mock_area": 0.31,
        "aspect_ratio": "1.25",
    },  #close
    "table_128x52": {
        "mock_area": 0.31,
        "aspect_ratio": "0.58",
    },  #close
    "table_128x44": {
        "mock_area": 0.31,
        "aspect_ratio": "0.68",
    },  # close
    "btb_128x56": {
        "mock_area": 0.309,
        "aspect_ratio": "0.53",
    },  # close
    "meta_128x120": {
        "mock_area": 0.31,
        "aspect_ratio": "0.25",
    },
    "lb_32x128": {
        "mock_area": 0.32,
        "aspect_ratio": "0.93",
    },
    "sdq_17x64": {
        "mock_area": 0.32,
        "aspect_ratio": "1.2",
    },
    "data_2048x8": {
        "mock_area": 3.2,
        # "aspect_ratio": "58",
        "core_utilization": "10",
    },
    "mem_256x4": {
        "mock_area": 0.265,
        # "aspect_ratio": "36",
    },
}

boom_tile_rams = {
    # "l2_tlb_ram_0_512x46": { "mock_area": None, "aspect_ratio": "2" },
    "ebtb_128x40": {
        "mock_area": 0.86,
        "aspect_ratio": "0.75",
    },  # close
    "array_256x128": {
        "mock_area": 1.225,
        "aspect_ratio": "0.47",
    },  # close
    "dataArrayB_256x64": {
        "mock_area": 1.23,
        "aspect_ratio": "0.94",
    },  # close
    # "l2_tlb_ram_0_512x45": { "mock_area": None, "aspect_ratio": "2" },
}

digital_top_srams = {
    # "cc_dir_1024x168": { "mock_area": None, "aspect_ratio": "2" },
    # "data_data_40x128": { "mock_area": None, "aspect_ratio": "2" },
    # "ghist_40x64": { "mock_area": None, "aspect_ratio": "2" },
    "meta_40x240": {
        "mock_area": 0.48,
        "aspect_ratio": "0.64",
    },  # ran out of left edge pin slots - can get closer by adjusting aspect ratio but only to within 1000 um^2
}

# combine SRAMs into one dictionary for processing
all_srams = boom_tile_rams | boom_tile_small_srams | digital_top_srams

write_binary(
    name = "srams",
    data = str(all_srams),
)

[
    orfs_flow(
        name = ram,
        abstract_stage = "cts",
        arguments = SRAM_SYNTH_ARGUMENTS | SKIP_REPORT_METRICS | {"SYNTH_MEMORY_MAX_BITS": "16384"} | {
                        "PLACE_PINS_ARGS": "-min_distance 1 -min_distance_in_tracks",
                    } | BLOCK_FLOORPLAN |
                    {
                        "CORE_UTILIZATION": ram_data.get("core_utilization", "40"),
                        "CORE_ASPECT_RATIO": ram_data.get("aspect_ratio", "1"),
                    } | SRAM_FLOOR_PLACE_ARGUMENTS | {
            "PLACE_DENSITY": "0.65",
            "GPL_TIMING_DRIVEN": "0",
        } | {
            "SKIP_CTS_REPAIR_TIMING": "0",
            "SKIP_LAST_GASP": "1",
            "SETUP_SLACK_MARGIN": "-500",
        },
        mock_area = ram_data["mock_area"],
        stage_sources = {
            "synth": [":constraints-sram"],
            "floorplan": [":io-sram"],
            "place": [":io-sram"],
        },
        verilog_files = [
            {
                "array_256x128": "mock/",
                "cc_dir_1024x168": "mock/",
                "data_2048x2": "mock/",
                "dataArrayB_256x64": "mock/",
                "data_data_40x128": "mock/",
                "ebtb_128x40": "mock/",
                "ghist_40x64": "mock/",
                "l2_tlb_ram_0_512x45": "mock/",
                "tag_array_64x184": "mock/",
                "data_2048x8": "mock/",
            }.get(ram, "rtl/") + ram + ".sv",
        ],
    )
    for ram, ram_data in all_srams.items()
]

all_srams_stage_num = "4"

all_srams_stage = "cts"

[orfs_run(
    name = ram + "_timing_report",
    src = ":" + ram + "_" + all_srams_stage,
    outs = [
        ram + ".yaml",
    ],
    arguments = {
        "OUTFILE": "$(location :" + ram + ".yaml)",
        "STAGE": all_srams_stage_num + "_" + all_srams_stage,
    },
    script = ":report-sram.tcl",
) for ram in all_srams.keys()]

[orfs_run(
    name = ram + "_floorplan_report",
    src = ":" + ram + "_mocked_floorplan",
    outs = [
        ram + "_floorplan.yaml",
    ],
    arguments = {"OUTFILE": "$(location :" + ram + "_floorplan.yaml)"},
    script = ":report-floorplan.tcl",
) for ram in all_srams.keys()]

genrule(
    name = "sram_report",
    srcs = ["sram.py"] + [
               ":srams",
           ] + [":" + ram + "_timing_report" for ram in all_srams.keys()] +
           [":" + ram + "_floorplan_report" for ram in all_srams.keys()],
    outs = ["sram-report.md"],
    cmd = (
        "$(location :sram.py) $(location :srams) " +
        " ".join(["$(location :" + ram + "_timing_report)" for ram in all_srams.keys()] +
                 ["$(location :" + ram + "_floorplan_report)" for ram in all_srams.keys()]) +
        " > $@"
    ),
    visibility = ["//visibility:public"],
)

boom_regfile_rams = {
    "regfile_128x64": ":io-sram-bottom",
    "regfile_128x65": ":io-sram",
}

[
    orfs_flow(
        name = ram,
        abstract_stage = all_srams_stage,
        stage_arguments = {
            "synth": SRAM_SYNTH_ARGUMENTS,
            "floorplan": BLOCK_FLOORPLAN | {
                # "CORE_UTILIZATION": "200",
                # "CORE_ASPECT_RATIO": "4",
                "DIE_AREA": "0 0 400 400",
                "CORE_AREA": "2 2 398 398",
                "IO_CONSTRAINTS": "$(location {})".format(io_constraint),
            },
            "place": {
                "PLACE_DENSITY": {
                    "regfile_128x64": "0.42",
                    "regfile_128x65": "0.3",
                }.get(ram),
                "IO_CONSTRAINTS": "$(location {})".format(io_constraint),
            },
        },
        stage_sources = {
            "synth": [":constraints-sram"],
            "floorplan": [io_constraint],
            "place": [io_constraint],
        },
        verilog_files = ["mock/" + ram + ".sv"],
    )
    for ram, io_constraint in boom_regfile_rams.items()
]

orfs_run(
    name = "xy_stats",
    src = ":BoomTile_1_cts",
    outs = ["xy_stats.txt"],
    arguments = {
        "OUTPUT": "$(location :xy_stats.txt)",
    },
    script = ":slack-positions.tcl",
)

sh_binary(
    name = "show_skew",
    srcs = ["plot-3d-slack.py"],
    args = ["$(location :xy_stats)"],
    data = ["xy_stats"],
    visibility = ["//visibility:public"],
)

orfs_run(
    name = "kpi",
    src = ":BoomTile_cts",
    outs = ["kpi.yaml"],
    arguments = {
        "OUTPUT": "$(location :kpi.yaml)",
    },
    script = ":report-kpi.tcl",
)

FAST_BUILD_SETTINGS = {
    # repair_timing runs for hours in floorplan
    "TNS_END_PERCENT": "0",
    "SKIP_CTS_REPAIR_TIMING": "1",
    "GPL_TIMING_DRIVEN": "0",
    "GPL_ROUTABILITY_DRIVEN": "1",
    # Save global route time for now
    "SKIP_INCREMENTAL_REPAIR": "1",
    "FILL_CELLS": "",
    "TAPCELL_TCL": "",
}

OTHER_VARIANTS = {
    "macro": {
        "description": "Base settings, provides macro placement from hierarchical synthesis",
        "variables": {
        },
    },
    "naja": {
        "renamed_inputs": {
            "floorplan": {"1_synth.v": ":naja"},
        },
        "previous_stage": {
            "floorplan": "BoomTile_synth",
        },
    },
}

SWEEP = {
    "base": {
        "description": "Flattend, timing driven placement",
        "variables": {
            "SYNTH_HIERARCHICAL": "0",
            "GPL_TIMING_DRIVEN": "1",
            "SKIP_CTS_REPAIR_TIMING": "0",
            "MACRO_PLACEMENT_TCL": "$(location write_macro_placement)",
            "SKIP_LAST_GASP": "0",
        },
        "stage_sources": {"floorplan": ["write_macro_placement"]},
    },
}

BOOMTILE_VARIABLES = SKIP_REPORT_METRICS | FAST_BUILD_SETTINGS | {
    "PDN_TCL": "$(PLATFORM_DIR)/openRoad/pdn/BLOCKS_grid_strategy.tcl",
    "IO_CONSTRAINTS": "$(location :io-boomtile)",
    "PLACE_DENSITY": "0.24",
    # We only need hierarchical synthesis when we are running through floorplan
    # write_macro_placement macros.tcl
    "SYNTH_HIERARCHICAL": "1",
    "SDC_FILE": "$(location :constraints-boomtile)",
    "MACRO_PLACE_HALO": "19 19",
    "PLACE_PINS_ARGS": "-annealing",
    "MIN_ROUTING_LAYER": "M2",
    "MAX_ROUTING_LAYER": "M7",
    "ROUTING_LAYER_ADJUSTMENT": "0.45",
    "DIE_AREA": "0 0 2000 2000",
    "CORE_AREA": "2 2 1998 1998",
    # Saves hours of build time, specific to BoomTile
    "SKIP_LAST_GASP": "1",
    "SETUP_SLACK_MARGIN": "-1300",
    "HOLD_SLACK_MARGIN": "-200",
}

SWEEP_JSON = {
    "base": BOOMTILE_VARIABLES,
    "sweep": {variant: SWEEP[variant] for variant in SWEEP},
    "stage": "cts",
    "stages": [
        "floorplan",
        "place",
        "cts",
    ],
}

write_binary(
    name = "sweep.json",
    data = str(SWEEP_JSON),
)

BOOMTILE_SOURCES = {
    "synth": [":constraints-boomtile"],
    "floorplan": [
        ":io-boomtile",
    ],
    "place": [":io-boomtile"],
}

boomtile_all_rams = boom_regfile_rams.keys() + all_srams.keys()

ALL_VARIANTS = SWEEP | OTHER_VARIANTS

[orfs_flow(
    name = "BoomTile",
    arguments = BOOMTILE_VARIABLES | ALL_VARIANTS[variant].get("variables", {}),
    macros = [
        ":" + m + "_generate_abstract"
        for m in boomtile_all_rams
        if m not in ALL_VARIANTS[variant].get("dissolve", [])
    ],
    previous_stage = ALL_VARIANTS[variant].get("previous_stage", {}),
    renamed_inputs = ALL_VARIANTS[variant].get("renamed_inputs", {}),
    # Explictily set arguments for a stage when stages are not listed in
    # variables.yaml or we want to explicitly set a multi-stage argument
    # for a specific stage, e.g. SETUP_SLACK_MARGIN could be useful to
    # have a different value for floorplan, cts and grt.
    stage_arguments = {
    },
    # Starlark does not have sets, nor can we define functions in BUILD files
    # Use a dict to get a set of keys
    stage_sources = {
        key: (ALL_VARIANTS[variant].get("stage_sources", {}).get(key, []) + BOOMTILE_SOURCES.get(key, []))
        for key in {
            key: "dummy"
            for key in (BOOMTILE_SOURCES.keys() + ALL_VARIANTS[variant].get("stage_sources", {}).keys())
        }.keys()
    },
    variant = variant,
    verilog_files = all_source_files,
) for variant in ALL_VARIANTS]

[filegroup(
    name = "BoomTile_" + variant + "_odb",
    srcs = [":BoomTile_" + ("" if variant == "base" else variant + "_") + SWEEP_JSON["stage"]],
    output_group = ("5_1_grt" if SWEEP_JSON["stage"] == "grt" else str(SWEEP_JSON["stages"].index(SWEEP_JSON["stage"]) + 2) + "_" + SWEEP_JSON["stage"]) +
                   ".odb",
    visibility = [":__subpackages__"],
) for variant in SWEEP]

[orfs_run(
    name = "BoomTile_" + variant + "_report",
    src = ":BoomTile_" + ("" if variant == "base" else variant + "_") + SWEEP_JSON["stage"],
    outs = [
        "BoomTile_" + variant + ".txt",
    ],
    arguments = {
        "ODB_FILE": "$(location :BoomTile_" + variant + "_odb)",
    },
    data = [":BoomTile_" + variant + "_odb"],
    extra_args = "> $WORK_HOME/BoomTile_" + variant + ".txt",
    script = ":report-wns.tcl",
) for variant in SWEEP]

[filegroup(
    name = "BoomTile_" + variant + "_logs",
    srcs = [":BoomTile_" + ("" if variant == "base" else variant + "_") + stage for stage in SWEEP_JSON["stages"]],
    output_group = "logs",
    visibility = [":__subpackages__"],
) for variant in SWEEP]

genrule(
    name = "wns_report",
    srcs = [
               "wns_report.py",
               "sweep.json",
           ] + [":BoomTile_" + variant + ".txt" for variant in SWEEP] +
           [":BoomTile_" + variant + "_logs" for variant in SWEEP],
    outs = ["BoomTile_wns_report.md"],
    cmd = (
        "$(location :wns_report.py) > $@" +
        " $(location :sweep.json)"
    ),
    visibility = ["//visibility:public"],
)

# fish out the file that we want as input to the "naja" rule
# below.
filegroup(
    name = "BoomTile_synth_unedited",
    srcs = ["BoomTile_synth"],
    output_group = "1_synth.v",
)

[filegroup(
    name = ram + "_lib",
    srcs = [ram + "_generate_abstract"],
    output_group = ram + ".lib",
) for ram in all_srams.keys() + boom_regfile_rams.keys()]

filegroup(
    name = "BoomTile_synth_mergedlib",
    srcs = ["BoomTile_synth"],
    output_group = "merged.lib",
)

# Read in the renamed synthesis output from above and provide
# the original name to the next stage
genrule(
    name = "naja",
    srcs = [
        ":BoomTile_synth_unedited",
        ":BoomTile_synth_mergedlib",
        "naja_edit/install/bin/naja_edit",
        "naja_edit/install/lib/python",
        "naja_edit/install/share/naja/primitives/asap7_new.py",
    ] + [":" + ram + "_lib" for ram in boomtile_all_rams],
    outs = ["naja.v"],
    #cmd = "mkdir -p `dirname $@`; export PYTHONPATH=$(location naja_edit/install/lib/python) && $(location naja_edit/install/bin/naja_edit) -a all -p $(location :BoomTile_synth_mergedlib) -f verilog -t verilog -i $(location :BoomTile_synth_unedited) -o $@",
    #cmd = "mkdir -p `dirname $@`; export PYTHONPATH=$(location naja_edit/install/lib/python) && $(location naja_edit/install/bin/naja_edit) -a all -p $(location naja_edit/install/share/naja/primitives/asap7_new.py) -f verilog -t verilog -i $(location :BoomTile_synth_unedited) -o $@",
    cmd = ("mkdir -p `dirname $@`; export PYTHONPATH=$(location naja_edit/install/lib/python) && $(location naja_edit/install/bin/naja_edit) -a all -p " +
           " ".join(["$(location :" + ram + "_lib)" for ram in boomtile_all_rams]) +
           " $(location :naja_edit/install/share/naja/primitives/asap7_new.py)" +
           " -f verilog -t verilog -i $(location :BoomTile_synth_unedited) -o $@"),
)

filegroup(
    name = "repair_logs",
    srcs = [
        ":BoomTile_" + ("" if variant == "base" else variant + "_") + stage
        for stage in SWEEP_JSON["stages"]
        for variant in SWEEP
    ],
    output_group = "logs",
)

genrule(
    name = "plot_repair",
    srcs = [
        "plot-retiming.py",
        "repair_logs",
    ],
    outs = ["retiming.pdf"],
    cmd = "$(location plot-retiming.py) $(location retiming.pdf) $(locations :repair_logs)",
    visibility = ["//visibility:public"],
)

# Use the macro placement from a different flow
orfs_run(
    name = "write_macro_placement",
    src = ":BoomTile_macro_floorplan",
    outs = [
        ":macro_placement.tcl",
    ],
    script = ":write_macros.tcl",
)
